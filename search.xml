<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>今日更新内容</title>
    <url>/2023/04/28/blog1/</url>
    <content><![CDATA[<p>以下是今天的更新内容：</p>
<span id="more"></span>
<ul class="lvl-0">
<li class="lvl-2">
<p>增加了新成员：wanko（汪酱） 🐶</p>
<blockquote>
<p>但是很遗憾，由于技术有限，没能成功编辑浮空文字</p>
</blockquote>
</li>
<li class="lvl-2">
<p>增加了基于valine平台的评论功能</p>
<blockquote>
<p>但是不知道如何删除评论，所以评论的各位爷要谨言慎行</p>
</blockquote>
</li>
<li class="lvl-2">
<p>更换了Hexo的Markdown渲染引擎，现在可以呈现emoji表情了</p>
<blockquote>
<p>emoji的简码链接： <a href="https://gist.github.com/rxaviers/7360908">简码</a></p>
</blockquote>
</li>
</ul>
<hr>
]]></content>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的动态联编</title>
    <url>/2023/06/06/blog10-cppDynamicArray/</url>
    <content><![CDATA[<p>  使用数组声明来创建数组时，将采用静态联编，即数组的长度在编译时设置。这个时候如果在括号里使用变量会报错，这样如果想输入数组长度以控制是做不到的：</p>
<span id="more"></span>
<p><img src="https://i2.100024.xyz/2023/06/06/ny90mg.webp#pic_center" alt=""></p>
<p>  如果想创建一个数组，其长度让用户来输入管理，这个时候就需要用<code>new[]</code>运算符创建数组，采用动态联编（动态数组）。</p>
<blockquote>
<p>静态联编：在编译时给数组分配内存被称为静态联编（static binding），意味着数组是在编译时加入到程序中的。</p>
</blockquote>
<blockquote>
<p>动态联编：使用new时，如果在运行阶段需要数组，则创建它；如果不需要，则不创建。还可以在程序运行时选择数组的长度。这被称为动态联编（dynamic binding），意味着数组是在程序运行时创建的。这种数组叫作动态数组（dynamic array）。</p>
</blockquote>
<p>  使用静态联编时，必须在编写程序时指定数组的长度；使用动态联编时，程序将在运行时确定数组的长度。</p>
<p>  了解了这些特性，就可以在程序中这样写：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Put in the number of people:__\b\b&quot;</span>;</span><br><span class="line">    cin &gt;&gt; num;</span><br><span class="line">    <span class="comment">//int Age[num];</span></span><br><span class="line">    <span class="type">int</span>* p_Age = <span class="keyword">new</span> <span class="type">int</span>[num];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;p_Age[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span>;</span><br><span class="line">        cin &gt;&gt; p_Age[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;the age of every person is:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;p_Age[&quot;</span> &lt;&lt; i &lt;&lt; <span class="string">&quot;] = &quot;</span> &lt;&lt; p_Age[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] p_Age;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  当输入10赋值给变量num时，接下来就会创建一个长度为10的数组以储存数据。</p>
<p>  当然采用这种方式创建数组的最后需要用<code>delete[]</code>来释放其占用的内存。</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构note（一）</title>
    <url>/2023/06/09/blog11-DS1/</url>
    <content><![CDATA[<h1>1.1 什么是数据结构？</h1>
<blockquote>
<p>“数据结构是数据对象，以及存在于该对象的实例和组成实例的数据元素之间的各种联系。这些联系可以通过定义相关的函数给出。”——Sartaj Sahni.</p>
</blockquote>
<span id="more"></span>
<ul class="lvl-0">
<li class="lvl-2">
<p>解决问题方法的效率，跟数据的组织方式有关</p>
</li>
<li class="lvl-2">
<p>解决问题方法的效率，跟空间的利用效率有关</p>
</li>
<li class="lvl-2">
<p>解决问题方法的效率，跟算法的巧妙程度有关</p>
</li>
</ul>
<h3 id="抽象数据类型">抽象数据类型</h3>
<ol>
<li class="lvl-3">
<p>数据结构（比如C++里的class）：</p>
<ol>
<li class="lvl-6">
<p>数据对象集</p>
</li>
<li class="lvl-6">
<p>数据集合相关联的操作集</p>
</li>
</ol>
</li>
<li class="lvl-3">
<p>抽象：</p>
<ol>
<li class="lvl-6">
<p>与存放数据的机器无关</p>
</li>
<li class="lvl-6">
<p>与数据存储的物理结构无关</p>
</li>
<li class="lvl-6">
<p>与实现操作的算法和编程语言均无关</p>
</li>
</ol>
</li>
</ol>
<h1>1.2 什么是算法？</h1>
<ul class="lvl-0">
<li class="lvl-2">
<p>一个有限的指令集</p>
</li>
<li class="lvl-2">
<p>接受一些输入（或不需要）</p>
</li>
<li class="lvl-2">
<p>产生输出</p>
</li>
<li class="lvl-2">
<p>在有限步骤后终止</p>
</li>
<li class="lvl-2">
<p>每条指令必须</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>有充分明确的目标，不可以有歧义</p>
</li>
<li class="lvl-4">
<p>计算机的处理能力范围内</p>
</li>
<li class="lvl-4">
<p>描述不依赖计算机语言和具体实现手段</p>
</li>
</ul>
</li>
</ul>
<h3 id="什么是好的算法？">什么是好的算法？</h3>
<ul class="lvl-0">
<li class="lvl-2">
<p>空间复杂度$S(n)$</p>
</li>
<li class="lvl-2">
<p>时间复杂度$T(n)$：$O(\log n)\le O(n)\le O(n\log n) \le O(n^{2}) \le O(2^{n})\le O(n!)$</p>
<ul class="lvl-2">
<li class="lvl-4">
<p>若两段算法分别有复杂度$T_1(n)=O(f_1(n))$和$T_2(n)=O(f_2(n))$，则：</p>
<ul class="lvl-4">
<li class="lvl-6">
<p>$T_1(n)+T_2(n)=\max(O(f_1(n)),O(f_2(n)))$</p>
</li>
<li class="lvl-6">
<p>$T_1(n)\times T_2(n)=O(f_1(n)\times f_2(n))$</p>
</li>
</ul>
</li>
<li class="lvl-4">
<p>一个for循环的时间复杂度等于循环次数乘以循环体代码的复杂度</p>
</li>
<li class="lvl-4">
<p>if-else结构的复杂度取决于if的条件判断复杂度和两个分支部分的复杂度，总体取三者中最大</p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>学习</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>2023.7.8-14旅游</title>
    <url>/2023/07/15/blog12-travel2ningbonanjing/</url>
    <content><![CDATA[<h1>2023.7.8-7.14 游宁波-南京</h1>
<ul class="lvl-0">
<li class="lvl-2">
<h2 id="Day-1：宁波南部商务区、鼓楼">Day 1：宁波南部商务区、鼓楼</h2>
</li>
</ul>
<p><img src="https://i2.100024.xyz/2023/07/15/p41mdp.webp" alt=""></p>
<span id="more"></span>
<p><img src="https://i2.100024.xyz/2023/07/15/p3z7la.webp" alt=""></p>
<p><img src="https://i2.100024.xyz/2023/07/15/p40psb.webp" alt=""></p>
<p><img src="https://i2.100024.xyz/2023/07/15/p4143n.webp" alt=""></p>
<p><img src="https://i2.100024.xyz/2023/07/15/p4215v.webp" alt=""></p>
<p>这是第一天下午到达宁波后去逛的，选的地方是宁波相对繁华的地段，给我的感受就是比我家要更有商业气息一些，但是某些地方也有很清晰的城乡界线，新旧之间没有任何的过渡让我觉得有些突兀。顿时觉得“城市”真是一个没有任何新意的概念：鳞次栉比的大厦，见多了就觉得这里可以是其他任何稍微繁华些的地方，但就是不知道这个地名叫宁波。</p>
<p>晚饭后去了那里的鼓楼，有一个钟楼我挺喜欢，这让我想起小时候我家不远处的钟楼，每天晚上我在窗边的小桌子上写作业时总是会在整点，细数彼岸的钟声，然后想起痛苦的背课文经历。</p>
<ul class="lvl-0">
<li class="lvl-2">
<h2 id="Day-2：宁波罗蒙">Day 2：宁波罗蒙</h2>
</li>
</ul>
<p><img src="https://i2.100024.xyz/2023/07/15/pdnm6g.webp" alt=""></p>
<p><img src="https://i2.100024.xyz/2023/07/15/pdws7l.webp" alt=""></p>
<p><img src="https://i2.100024.xyz/2023/07/15/pdx5cr.webp" alt=""></p>
<p><img src="https://i2.100024.xyz/2023/07/15/pdxkwx.webp" alt=""></p>
<p><img src="https://i2.100024.xyz/2023/07/15/pdyza9.webp" alt=""></p>
<p>第二天去了罗蒙，也就是当地的一个室内主题乐园。由于天气炎热，在早上不是最热的时候先体验了室外的项目，中午才回到室内。一天下来感觉精神上是很解压，但是肉体上也很疲惫，总之还是很值得的。</p>
<ul class="lvl-0">
<li class="lvl-2">
<h2 id="Day-3：南京夫子庙步行街、秦淮河">Day 3：南京夫子庙步行街、秦淮河</h2>
</li>
</ul>
<p><img src="https://img1.imgtp.com/2023/07/15/PaOo1u9w.jpg" alt=""></p>
<p><img src="https://img1.imgtp.com/2023/07/15/IV5GIOcm.jpg" alt=""></p>
<p><img src="https://img1.imgtp.com/2023/07/15/N9dVJzL3.jpg" alt=""></p>
<p><img src="https://img1.imgtp.com/2023/07/15/LDmHhivI.jpg" alt=""></p>
<p><img src="https://img1.imgtp.com/2023/07/15/0pZlofH7.jpg" alt=""></p>
<p><img src="https://img1.imgtp.com/2023/07/15/0g1qoHav.jpg" alt=""></p>
<p><img src="https://img1.imgtp.com/2023/07/15/ZUu1XU7s.jpg" alt=""></p>
<p>也是下午从宁波出发到的南京。到之后发现夫子庙附近的城市还是比较陈旧的，与我的想象大相径庭。夜里去住处附近的夫子庙步行街以及沿秦淮河岸简单逛了逛，游客纷杂，到处是售卖景区商品的摊点和商人，身着古装的参观者，甚至还有人力车。或许是因为刚从宁波的市区过来，一时间竟有些恍惚，这是一个光怪陆离的地方，是大娱乐的世界，这一点倒与某句诗中所表达的意思相近。</p>
<ul class="lvl-0">
<li class="lvl-2">
<h2 id="Day-4：明孝陵-中山陵">Day 4：明孝陵&amp;中山陵</h2>
</li>
</ul>
<p><img src="https://s1.ax1x.com/2023/07/15/pC5ypQ0.md.jpg" alt=""></p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC5yFwF.md.jpg" alt=""></p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC5szzq.md.jpg" alt=""></p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC5y9yV.md.jpg" alt=""></p>
<p>明孝陵是朱元璋与其皇后的合葬陵寝，中山陵是孙中山先生的陵寝。遗憾的是我的历史知识并不富足，并且也没有请解说，因此我能看到的东西是非常局限的，没有厚度的。</p>
<ul class="lvl-0">
<li class="lvl-2">
<h2 id="Day-5：总统府-鸡鸣寺-玄武湖">Day 5：总统府&amp;鸡鸣寺&amp;玄武湖</h2>
<p><img src="https://s1.ax1x.com/2023/07/15/pC56FjP.md.jpg" alt=""></p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC56eAg.md.jpg" alt=""></p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC56Anf.md.jpg" alt=""></p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC56EB8.md.jpg" alt=""></p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC56VHS.md.jpg" alt=""></p>
</li>
</ul>
<p>总统府内部人太多了，也就没有好好拍照片。幸运的是最近的一家茶颜悦色是刚开业的，排队的人并不多，这也是我第一次尝试这个品牌。在鸡鸣寺找大雄宝殿找了很久还是没找到…</p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC56d3R.md.jpg" alt=""></p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC56wg1.md.jpg" alt=""></p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC56aC9.md.jpg" alt=""></p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC56N4J.md.jpg" alt=""></p>
<p>在玄武湖的另一边可以看到鸡鸣寺和明城墙，还有远方的城市。</p>
<p>最后因为时间还有一些，遂去了附近一个免费参观的古生物博物馆，这里可以满足小朋友们的好奇心，适合带孩子来。</p>
<ul class="lvl-0">
<li class="lvl-2">
<h2 id="Day-6：南京博物院">Day 6：南京博物院</h2>
</li>
</ul>
<p>前一天得知需要抢票，本来不抱太大希望，但最后诸友居然都抢到了票，遂立刻打车前往。</p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC56b5Q.md.jpg" alt=""></p>
<p><img src="https://s1.ax1x.com/2023/07/15/pC56HUg.md.jpg" alt=""></p>
<p>里面人很多，加上游览顺序不是很好，就花了半天时间参观。一些照片拍的没有思路，就没有放在这里了。</p>
<ul class="lvl-0">
<li class="lvl-2">
<h2 id="总结">总结</h2>
</li>
</ul>
<p>最后还有一些遗憾的是遇难同胞纪念馆没有预约到，离住的地方比较远，也就没有去。希望以后有机会再来吧。</p>
<p>这个暑假或许是最自由的一个假期了，以后不知道能不能像现在一样说走就走。这天气是真的很热，想静下心来游览的难度也很大。但这次旅游还是给了我从多天宅家中回到现实去经历和思考的一次机会，也算是有不小的收获。</p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>旅游</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构note（三）</title>
    <url>/2023/07/28/blog14-DS3/</url>
    <content><![CDATA[<ul class="lvl-0">
<li class="lvl-2">
<h2 id="链表与数组、向量的不同之处">链表与数组、向量的不同之处</h2>
</li>
</ul>
<p>链表与数组、向量不同之处在于，其元素的地址可以任意而不要求连续。元素之间通过指针相互联系。虽然其仍要求各元素在逻辑上具线性次序，但对物理地址未作任何限制，也即“动态存储”策略。</p>
<span id="more"></span>
<p>引入列表结构的目的，就在于弥补向量结构在解决某些应用问题时，在功能及性能方面的不足。其中的数据，分散为一系列称作<strong>节点</strong>（node）的单位，节点之间通过指针相互索引和访问。为了引入新节点或删除原有节点，只需在局部，调整少量相关节点之间的指针。这就意味着，采用动态存储策略，至少可以大大降低动态操作的成本。</p>
<ul class="lvl-0">
<li class="lvl-2">
<h2 id="单向链表">单向链表</h2>
</li>
</ul>
<p>单向链表由结点构成，每个结点包含两个域：指针域和数据域。最后一个数据的指针域赋<code>NULL</code>.</p>
<ul class="lvl-0">
<li class="lvl-2">
<h2 id="单向链表的实现">单向链表的实现</h2>
<ul class="lvl-2">
<li class="lvl-4">
<h3 id="框架的搭建">框架的搭建</h3>
</li>
</ul>
<ol>
<li class="lvl-5">
<p>准备头文件<code>LinkList.h</code></p>
<p>定义两个class：结点和链表，声明一些需要的接口：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="comment">//结点定义（这里数据域没有用抽象的数据类型，以后会改进）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">node</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> data;<span class="comment">//数据域</span></span><br><span class="line">    node* next;<span class="comment">//指针域</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">list</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    node* head;<span class="comment">//指向链表首位node</span></span><br><span class="line">    <span class="type">int</span> size;<span class="comment">//链表结点个数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作接口</span></span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="function">list* <span class="title">LinkList_init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkList_Insert</span><span class="params">(list* list, <span class="type">int</span> pos, <span class="type">int</span> data)</span></span>;</span><br><span class="line"><span class="comment">//删除指定位置的值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkList_Del</span><span class="params">(list* list, <span class="type">int</span> pos)</span></span>;</span><br><span class="line"><span class="comment">//获得链表长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LinkList_GetSize</span><span class="params">(list* list)</span></span>;</span><br><span class="line"><span class="comment">//返回第一个结点数据</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LinkList_FirstData</span><span class="params">(list* list)</span></span>;</span><br><span class="line"><span class="comment">//释放链表内存</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkList_FreeSpace</span><span class="params">(list* list)</span></span>;</span><br><span class="line"><span class="comment">//查找某个值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LinkList_Search</span><span class="params">(list* list, <span class="type">int</span> data)</span></span>;</span><br><span class="line"><span class="comment">//打印链表结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkList_Print</span><span class="params">(list* list)</span></span>;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-5">
<p>准备接口定义的文件<code>LinkList.cpp</code></p>
<p>把每个先前声明好的复制到该文件，并且需要<code>#include &quot;LinkList.h&quot;</code>.</p>
</li>
<li class="lvl-5">
<p>准备用于测试的main函数.</p>
</li>
</ol>
<ul class="lvl-2">
<li class="lvl-4">
<p>具体写操作接口定义</p>
</li>
</ul>
<ol>
<li class="lvl-5">
<p>初始化链表<code>LinkList_init()</code></p>
<p>根据前面定义的class，首先要创建一个链表，再分配一个头结点，头结点不保存数据。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="function">list* <span class="title">LinkList_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    list* L = <span class="keyword">new</span> list;</span><br><span class="line">    L-&gt;size = <span class="number">0</span>;</span><br><span class="line">    L-&gt;head = <span class="keyword">new</span> node;</span><br><span class="line">    L-&gt;head-&gt;data = <span class="literal">NULL</span>;<span class="comment">//头结点不保存数据</span></span><br><span class="line">    L-&gt;head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-5">
<p>插入数据</p>
<p>需要处理pos越界的情况以及list、data为NULL的情况，这里由于事先将data设置为了确定的数据类型int，因此理论上可以不进行处理，而这里还是加上了处理的部分以便后续的更改。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入数据</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkList_Insert</span><span class="params">(list* list, <span class="type">int</span> pos, <span class="type">int</span> data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span> &amp;&amp; data!=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//友好处理pos越界的情况</span></span><br><span class="line">    <span class="keyword">if</span> (pos&lt;<span class="number">0</span> || pos&gt;list-&gt;size) &#123;</span><br><span class="line">        pos = list-&gt;size;<span class="comment">//让其等于尾部</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建新的结点</span></span><br><span class="line">    node* newnode = <span class="keyword">new</span> node;</span><br><span class="line">    newnode-&gt;data = data;</span><br><span class="line">    newnode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//找结点</span></span><br><span class="line">    <span class="comment">//辅助指针变量</span></span><br><span class="line">    node* pCurrent = list-&gt;head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; i++) &#123;</span><br><span class="line">        pCurrent = pCurrent-&gt;next;</span><br><span class="line">    &#125;<span class="comment">//让指针指向pos前的结点位置</span></span><br><span class="line">    <span class="comment">//新结点插入链表</span></span><br><span class="line">    newnode-&gt;next = pCurrent-&gt;next;</span><br><span class="line">    pCurrent-&gt;next = newnode;</span><br><span class="line"></span><br><span class="line">    list-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-5">
<p>删除指定位置的值</p>
<p>这里就不能友好的处理pos越界的情况了，需要适当的修改。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除指定位置的值</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkList_Del</span><span class="params">(list* list, <span class="type">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pos&lt;<span class="number">0</span> || pos&gt;=list-&gt;size) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定位到删除结点的前一个结点</span></span><br><span class="line">    node* pCurrent = list-&gt;head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pos; i++) &#123;</span><br><span class="line">        pCurrent = pCurrent-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//缓存删除的结点</span></span><br><span class="line">    node* delnode = pCurrent-&gt;next;</span><br><span class="line">    pCurrent-&gt;next = delnode-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> delnode;</span><br><span class="line">    list-&gt;size--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-5">
<p>获得链表长度</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得链表长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LinkList_GetSize</span><span class="params">(list* list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list-&gt;size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-5">
<p>返回第一个结点的数据</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回第一个数据（不是头结点）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LinkList_FirstData</span><span class="params">(list* list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list-&gt;head-&gt;next-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-5">
<p>释放链表内存</p>
<p>辅助指针的设置和前面的2、3思路一样，下面需要遍历的时候同理。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//释放链表内存</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkList_FreeSpace</span><span class="params">(list* list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//辅助指针、释放结点内存</span></span><br><span class="line">    node* pCurrent = list-&gt;head;</span><br><span class="line">    <span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">//缓存下一个结点</span></span><br><span class="line">        node* pNext = pCurrent-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> pCurrent;</span><br><span class="line">        pCurrent = pNext;</span><br><span class="line">    &#125;</span><br><span class="line">    list-&gt;size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">delete</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-5">
<p>查找某个值</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找某个值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">LinkList_Search</span><span class="params">(list* list, <span class="type">int</span> data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span> &amp;&amp; data != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历</span></span><br><span class="line">    node* pCurrent = list-&gt;head-&gt;next;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pCurrent-&gt;data == data) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">        pCurrent = pCurrent-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-5">
<p>打印链表结点</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//打印链表结点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LinkList_Print</span><span class="params">(list* list)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//辅助指针变量</span></span><br><span class="line">    node* pCurrent = list-&gt;head-&gt;next;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;the datum of list are：&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        cout &lt;&lt; pCurrent-&gt;data;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        pCurrent = pCurrent-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li class="lvl-2">
<h2 id="测试情况">测试情况</h2>
</li>
</ul>
<p>测试的代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;LinkList.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    list* list = <span class="built_in">LinkList_init</span>();</span><br><span class="line">    <span class="type">int</span> a[<span class="number">9</span>] = &#123; <span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">8</span> &#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">LinkList_Insert</span>(list, i, a[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">LinkList_Print</span>(list);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;----after--delete----&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">LinkList_Del</span>(list, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">LinkList_Print</span>(list);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;the first data of the list is: &quot;</span> &lt;&lt; <span class="built_in">LinkList_FirstData</span>(list) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;the size of the list is: &quot;</span> &lt;&lt; <span class="built_in">LinkList_GetSize</span>(list) &lt;&lt; endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;the data &#x27;0&#x27; is at: &quot;</span> &lt;&lt; <span class="built_in">LinkList_Search</span>(list, <span class="number">0</span>) &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">LinkList_FreeSpace</span>(list);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<p><img src="https://i2.100024.xyz/2023/07/28/xjf8h8.webp" alt=""></p>
]]></content>
      <categories>
        <category>学习</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构note（二）</title>
    <url>/2023/07/26/blog13-DS2/</url>
    <content><![CDATA[<h1>算法复杂度的一些简单实例</h1>
<ul class="lvl-0">
<li class="lvl-2">
<h3 id="Algorithm01">Algorithm01</h3>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Algorithm01</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum=<span class="number">0</span>,n=<span class="number">100</span>;</span><br><span class="line">    sum=(<span class="number">1</span>+n)*n/<span class="number">2</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一共进行了三步，这是一个$\mathcal{O}(1)$的算法.</p>
<span id="more"></span>
<ul class="lvl-0">
<li class="lvl-2">
<h3 id="Algorithm02">Algorithm02</h3>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Algorithm02</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>,i&lt;n;i++)&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>for循环的执行次数即为$n$，故复杂度为$\mathcal{O}(n)$.</p>
<ul class="lvl-0">
<li class="lvl-2">
<h3 id="Algorithm03">Algorithm03</h3>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Algorithm03</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> count=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(count&lt;n)&#123;</span><br><span class="line">        count=count*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，要想把while语句走完，根据判断条件和循环节，需要$log_2n$次，忽略声明变量的常数次复杂度，可得复杂度为$\mathcal{O}(\log_2n)$.</p>
<ul class="lvl-0">
<li class="lvl-2">
<h3 id="Algorithm04">Algorithm04</h3>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Algorithm04</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i+j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>外循环$i=0$时，内循环执行了$n$次；$i=1$时，内循环执行$n-1$次……故循环共执行了$n+(n-1)+…+1=\frac{n(n+1)}{2}$次，取最高次项，复杂度为$\mathcal{O}(n^2)$.</p>
<ul class="lvl-0">
<li class="lvl-2">
<h3 id="Algorithm05">Algorithm05</h3>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">function05</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hello world!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Algorithm05</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    n++;</span><br><span class="line">    function05(n);</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        function05(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hello world!\n&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在第二个函数里调用了function05函数，故在第二个函数中计算，有$1+n+n<sup>2+\frac{n(n+1)}{2}$次，也即复杂度为$\mathcal{O}(n</sup>2)$.</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟退火算法</title>
    <url>/2023/07/31/blog15-Metropolis/</url>
    <content><![CDATA[<h2 id="引入">引入</h2>
<p>将固体加温至充分高，再让其缓慢降温。升温时，固体内部的粒子随升温变为无序且活跃的状态，内能增大；降温时，粒子趋于惰性有序，在每个温度都达到平衡的状态，最后在常温时达到基态，内能降为最小。</p>
<p>这个降温的过程也就是退火。受此物理背景的启发，结合统计的知识，模拟退火算法的思想逐渐产生。</p>
<hr>
<h2 id="理论基础">理论基础</h2>
<p>固体退火的物理过程和统计性质：</p>
<ol>
<li class="lvl-3">
<p>加温：随温度升高，粒子能量增高，与平衡位置的距离增大；</p>
</li>
<li class="lvl-3">
<p>等温：温度升至熔化温度，固体的规则性质被打破，成为液体，粒子可以自由运动和重新排序，消除系统中原先存在的非均匀状态；</p>
</li>
<li class="lvl-3">
<p>冷却：随着温度的下降，粒子能量减弱，运动减小，粒子最终进入平衡状态，固化为具有最小能量的晶体。</p>
</li>
</ol>
<span id="more"></span>
<p>温度$t$下，分子停留在某一状态$r$满足Bolztmann概率分布：</p>
<p>$$<br>
P\left\lbrace \bar{E}=E\left( r \right) \right\rbrace =\frac{1}{z\left( t \right)}\exp \left( -\frac{E\left( r \right)}{kt} \right)<br>
$$</p>
<p>其中：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>$E\left( r \right)$：状态$r$的能量；</p>
</li>
<li class="lvl-2">
<p>$k$：物理学中的波尔兹曼常数；</p>
</li>
<li class="lvl-2">
<p>$t$：材料温度</p>
</li>
<li class="lvl-2">
<p>$E$：分子能量的一个随机变量；</p>
</li>
<li class="lvl-2">
<p>$z(t)$：概率分布的标准化因子；</p>
</li>
<li class="lvl-2">
<p>$D_0$：最低能量状态的个数；</p>
</li>
<li class="lvl-2">
<p>$D$：状态空间中状态的个数.</p>
</li>
</ul>
<hr>
<h2 id="基本思想">基本思想</h2>
<img title="" src="https://i2.100024.xyz/2023/07/31/pmgiw0.webp" alt="" data-align="center" width="257">
<p>根据统计的理论，状态迁移准则(Metropolis抽样稳定性条件)</p>
<p>$$<br>
\exp \left( \frac{E_i-E_j}{kt} \right) \ge random\left( 0,1 \right)<br>
$$</p>
<p>若新状态$j$的能量满足条件，则被用来代替原状态$i$。</p>
<p>高温下，可以接受能量差较大的新状态，也即允许在可行域内做出更多的尝试，接受目标函数值的暂时劣化，以跳出局部最优解的寻找。</p>
<p>低温下，只接受能量差较小的新状态，即在降温的终点，少做尝试，寻找局部最优。</p>
<blockquote>
<p>由某一较高的初始温度开始，利用上式在求解域内随机搜索采样，随着温度不断降低，使系统的能量达到最低状态，即相当于能量函数的全局最优解。</p>
</blockquote>
<hr>
<h2 id="算法基本步骤">算法基本步骤</h2>
<p>设求解优化问题$\min\text{.\ }f\left( x \right) \ x\in R^n$</p>
<img title="" src="https://i2.100024.xyz/2023/07/31/pqnc2b.webp" alt="" data-align="inline">
<p>内循环终止条件：</p>
<ol>
<li class="lvl-3">
<p>规定产生有限个候选解；</p>
</li>
<li class="lvl-3">
<p>在连续若干步候选解的目标函数值变化很小；</p>
</li>
<li class="lvl-3">
<p>目标函数值的均值已相当稳定。</p>
</li>
</ol>
<p>外循环终止条件：</p>
<ol>
<li class="lvl-3">
<p>设置一个终止温度$t_e$；</p>
</li>
<li class="lvl-3">
<p>规定外循环的最大迭代次数$k_{max}$；</p>
</li>
<li class="lvl-3">
<p>算法在每个$t_k$值搜索到的最优解的值在若干次迭代内保持不变。</p>
</li>
</ol>
<hr>
<p>在模拟退火算法中应注意以下问题：（1）理论上，降温过程要足够缓慢，要使得在每一温度下达到热平衡。但在计算机实现中，如果降温速度过缓，所得到的解的性能会较为令人满意，但是算法会太慢，相对于简单的搜索算法不具有明显优势。如果降温速度过快，很可能最终得不到全局最优解。因此使用时要综合考虑解的性能和算法速度，在两者之间采取一种折衷。（2）要确定在每一温度下状态转换的结束准则。实际操作可以考虑当连续 m 次的转换过程没有使状态发生变化时结束该温度下的状态转换。最终温度的确定可以提前定为一个较小的值Te ，或连续几个温度下转换过程没有使状态发生变化算法就结束。（3）选择初始温度和确定某个可行解的邻域的方法也要恰当。</p>
<hr>
<h2 id="概述">概述</h2>
<p>从算法来看，模拟退火算法就像是<a href="https://zhuanlan.zhihu.com/p/600304627">改良圈算法</a>的一个改进，改良圈算法只能获得一个局部的最优解，而模拟退火算法则是在其基础上，受固体退火的过程和统计性质的启发，引入了温度的变量，让可行解在高温阶段作出更多尝试、跳出寻找局部最优，而在低温阶段降低活性转而去找局部最优。</p>
<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=762713326&bvid=BV1j64y1Y7FB&cid=398375380&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
</div>]]></content>
      <categories>
        <category>学习</category>
        <category>算法</category>
      </categories>
      <tags>
        <tag>现代优化算法</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构note（四）</title>
    <url>/2023/08/01/blog16-DS4/</url>
    <content><![CDATA[<h1>栈和队列</h1>
<p>栈和队列是限定插入和删除只能在表的“端点”进行的<u>线性表</u>。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>栈：其特点可以概括为“<strong>后进先出</strong>”。生活中比如手电筒的电池、手枪的弹匣等都可以视作“栈”，插入从尾部，删除也从尾部。（从一端插入和删除）</p>
</li>
<li class="lvl-2">
<p>队列：特点为“<strong>先进先出</strong>”，比如排队时最前面的人是最早来到这个队列也将最先离开队伍，插入从队尾插入，删除从队头删除。（从两端）</p>
</li>
</ul>
<p>由于这两类结构分别所具有的这些特性在某些问题求解过程中也出现，故算法中也应利用“栈和队列”。</p>
<span id="more"></span>
<h2 id="栈-stack-的定义和特点">栈(stack)的定义和特点</h2>
<img title="" src="https://img-blog.csdnimg.cn/20191212190125865.gif" alt="" data-align="center" width="373">
<p>后进先出(Last In First Out)的线性表，简称<strong>LIFO</strong>结构，表尾an端称为栈顶（Top），表头a1端称为栈头（Base），通常用S表示栈。</p>
<h2 id="队列-queue-的定义和特点">队列(queue)的定义和特点</h2>
<img title="" src="https://pic4.zhimg.com/v2-e6b910a48ddfac7dddc2c610cde979bf_b.webp" alt="" width="243" data-align="center">
<p>先进先出(First In First Out)的线性表，简称<strong>FIFO</strong>结构，在表的一端（表尾）插入，在另一端（表头）删除。通常用Q表示队列。</p>
<hr>
<h2 id="栈的实现（顺序栈）：">栈的实现（顺序栈）：</h2>
<p><code>stack.h</code>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Maxsize 5<span class="comment">//最大容量</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">stack</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> stacksize; <span class="comment">//表示栈可使用的最大容量</span></span><br><span class="line">    <span class="type">int</span>* top;<span class="comment">//指向栈顶元素之上的位置</span></span><br><span class="line">    <span class="type">int</span>* base;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">stack <span class="title">Init_Stack</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Destroy_Stack</span><span class="params">(stack* s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ifEmpty_Stack</span><span class="params">(stack* s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求栈长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length_Stack</span><span class="params">(stack* s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取栈顶元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetTop_Stack</span><span class="params">(stack* s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clear_Stack</span><span class="params">(stack* s)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈（插入元素）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push_Stack</span><span class="params">(stack* s, <span class="type">int</span> e)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈（弹出元素）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Pop_Stack</span><span class="params">(stack* s)</span></span>;</span><br></pre></td></tr></table></figure>
<p><code>stack.cpp</code>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">stack <span class="title">Init_Stack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stack s;</span><br><span class="line">    s.stacksize = Maxsize;</span><br><span class="line">    s.base = <span class="keyword">new</span> <span class="type">int</span>[Maxsize];</span><br><span class="line">    s.top = s.base;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Destroy_Stack</span><span class="params">(stack* s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;base != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">delete</span> s-&gt;base;</span><br><span class="line">        s-&gt;stacksize = <span class="number">0</span>;</span><br><span class="line">        s-&gt;base = s-&gt;top = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断栈是否空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">ifEmpty_Stack</span><span class="params">(stack* s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;top == s-&gt;base) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求栈长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length_Stack</span><span class="params">(stack* s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s-&gt;top-s-&gt;base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取栈顶元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetTop_Stack</span><span class="params">(stack* s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> *(s-&gt;top<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空栈</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clear_Stack</span><span class="params">(stack* s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;base != <span class="literal">NULL</span>)&#123;</span><br><span class="line">        s-&gt;top = s-&gt;base;</span><br><span class="line">    &#125;<span class="comment">//top指针指向栈底即可</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入栈（插入元素）</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Push_Stack</span><span class="params">(stack* s, <span class="type">int</span> e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;top-s-&gt;base == s-&gt;stacksize) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="comment">//判断是否满栈</span></span><br><span class="line">    *s-&gt;top = e;</span><br><span class="line">    s-&gt;top++;</span><br><span class="line">    <span class="comment">//上面的两步可以合并成一步：*s-&gt;top++ = e;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出栈（弹出元素）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Pop_Stack</span><span class="params">(stack* s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;top == s-&gt;base) &#123;</span><br><span class="line">        std::cout &lt;&lt; <span class="string">&quot;当前为空栈&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;<span class="comment">//判断是否空栈</span></span><br><span class="line">    s-&gt;top--;</span><br><span class="line">    <span class="keyword">return</span> *s-&gt;top;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>teststack.cpp</code>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stack.h&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stack s = <span class="built_in">Init_Stack</span>();</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;栈状态为（1空0非空）：&quot;</span> &lt;&lt; ifEmpty_Stack(&amp;s) &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">Push_Stack</span>(&amp;s, <span class="number">1</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;栈状态为（1空0非空）：&quot;</span> &lt;&lt; ifEmpty_Stack(&amp;s) &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">Push_Stack</span>(&amp;s, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">Push_Stack</span>(&amp;s, <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">Push_Stack</span>(&amp;s, <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">Push_Stack</span>(&amp;s, <span class="number">8</span>);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;栈顶元素为：&quot;</span> &lt;&lt; <span class="built_in">GetTop_Stack</span>(&amp;s) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;现在弹出：&quot;</span> &lt;&lt; <span class="built_in">Pop_Stack</span>(&amp;s) &lt;&lt; endl;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;此时栈顶元素为：&quot;</span> &lt;&lt; <span class="built_in">GetTop_Stack</span>(&amp;s) &lt;&lt;</span><br><span class="line">        <span class="string">&quot;   栈内元素有：&quot;</span>&lt;&lt;<span class="built_in">Length_Stack</span>(&amp;s)&lt;&lt;<span class="string">&quot;个&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">Clear_Stack</span>(&amp;s);</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;清除后栈状态为（1空0非空）：&quot;</span> &lt;&lt; ifEmpty_Stack(&amp;s) &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">Destroy_Stack</span>(&amp;s);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="队列的实现（循环顺序队列）：">队列的实现（循环顺序队列）：</h2>
<p>由于只申请了MaxQSize大小的内存空间，且队头队尾指针均会在入队和出队的过程中后移，故当队尾溢出时有时并没有真正的超出给定的储存大小，这种现象被称为“假溢出”。解决假溢出的一种方法就是采用循环队列。</p>
<p>还有一个问题就是，判断队空或队满要比栈空或栈满麻烦一点，因为判断队空/满的条件是一样的，都是队空指针==队尾指针。解决的方法是加一个统计空间的变量或者少用一个存储空间。</p>
<p>下面仅陈列<code>queue.cpp</code>的定义部分。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;queue.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化队列</span></span><br><span class="line"><span class="function">queue <span class="title">Init_Queue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	queue q;</span><br><span class="line">	q.base = <span class="keyword">new</span> <span class="type">int</span>[MaxQSize];</span><br><span class="line">	q.front = q.rear = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> q; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//销毁队列</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Destroy_Queue</span><span class="params">(queue* q)</span> </span>&#123;</span><br><span class="line">	q-&gt;front = q-&gt;rear;</span><br><span class="line">	<span class="keyword">delete</span> q-&gt;base;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空队列</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Clear_Queue</span><span class="params">(queue* q)</span> </span>&#123;</span><br><span class="line">	q-&gt;front = q-&gt;rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得队列长度</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Length_Queue</span><span class="params">(queue* q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (q-&gt;rear - q-&gt;front + MaxQSize) % MaxQSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取队头元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">GetHead_Queue</span><span class="params">(queue* q)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (q-&gt;front != q-&gt;rear) &#123;</span><br><span class="line">		<span class="keyword">return</span> q-&gt;base[q-&gt;front];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//入队</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">EnQueue</span><span class="params">(queue* q,<span class="type">int</span> data)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//判断队满</span></span><br><span class="line">	<span class="keyword">if</span> ((q-&gt;rear + <span class="number">1</span>) % MaxQSize == q-&gt;front) &#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	q-&gt;base[q-&gt;rear] = data;</span><br><span class="line">	q-&gt;rear = (q-&gt;rear + <span class="number">1</span>) % MaxQSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//出队</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">DeQueue</span><span class="params">(queue* q)</span> </span>&#123;</span><br><span class="line">	<span class="comment">//判断队空</span></span><br><span class="line">	<span class="keyword">if</span> (q-&gt;front == q-&gt;rear) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> e = q-&gt;base[q-&gt;front];</span><br><span class="line">	q-&gt;front = (q-&gt;front + <span class="number">1</span>) % MaxQSize;</span><br><span class="line">	<span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>主成分分析（PCA）</title>
    <url>/2023/08/18/blog20-PCA/</url>
    <content><![CDATA[<p>主成分分析的主要目的是希望用较少的变量去解释原来资料中的大部分变异，将我们手中许多相关性很高的变量转化成彼此相互独立或不相关的变量。实际上是一种降维的方法。</p>
<h3 id="1-基本思想及方法">1 基本思想及方法</h3>
<p>p个随机变量$X_1,…,X_p$，其线性组合构成一个可能的主成分：$c_1X_1+\cdots+c_pX_p$（说白了就是一个旋转平移的变换）。如果能使$Var(c_1X_1+\cdots+c_pX_p)$达到最大，则能最大程度的保留信息。通常还要加限制：$c_1<sup>2+\cdots+c_p</sup>2=1$，在此约束下求最优解。易见这个解是一个p维单位向量（这样可以构成一个旋转矩阵）。</p>
<p>这样找到一个解的话就获得了一个主成分。然而一个主成分不足以代表原有的p个变量，因此还需要寻找更多个。这些主成分不应该有重叠的信息，统计上的描述就是让两两主成分的协方差为零，几何上就是两两主成分的方向正交。</p>
<span id="more"></span>
<p>过程（简洁版）：</p>
<ol>
<li class="lvl-3">
<p>去中心化（把坐标原点放在数据中心）</p>
</li>
<li class="lvl-3">
<p>找坐标系（找到方差最大的方向）</p>
</li>
</ol>
<h3 id="2-主成分估计">2 主成分估计</h3>
<p>详细的证明可以见相关教材，这里写结论。</p>
<p>设有 p 个回归（自）变量，它在第i次试验中的取值为$X_i=(x_{i1},\cdots,x_{ip})^T$，$(i=1,2,\cdots,n)$，可以写成矩阵形式：$X=(X_1,X_2,\cdots,X_n)$.这里假设已经进行了去中心化。</p>
<p>根据协方差矩阵的公式，设其协方差矩阵为$C$，则$C=\frac{X^TX}{n-1}$.</p>
<p>$C$的特征向量就是主成分的方向，特征值就是该主成分的贡献度，也就是上述坐标轴方向的方差。贡献度低的方向若被省去就是降维了。</p>
<h3 id="3-特征值因子的筛选">3 特征值因子的筛选</h3>
<p>降维需要一个标准，自然不能说省去就省去。这里一个实用的方法也是经常采用的方式是考虑贡献率，即保持删去的特征向量的特征值$\lambda_{r+1},\lambda_{r+2},\cdots,\lambda_p$的和占所有特征值之和$\Sigma\lambda_i$的$15%$以下。</p>
<p>但是单纯考虑累积贡献率有时是不够的，还需要考虑选择的主成分对原始变量的贡献值，我们用相关系数的平方和来表示，如果选取的主成分为$z_1,z_2,\cdots,z_r$，则它们对原变量$x_i$的贡献值为：</p>
<p>$$<br>
\rho_i=\sum_{j=1}<sup>r{r</sup>2( z_j,x_i)}<br>
$$</p>
<p>这里括号代表向量内积。有些例子可以说明，单纯考虑贡献率会导致降维降的太多而丢失信息，这里就不附上了。</p>
<h3 id="4-实际应用">4 实际应用</h3>
<p>在实际的应用中，如果可以分析得到的主成分，赋予其字面意义，会更有说服力。</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>多元分析</category>
      </categories>
      <tags>
        <tag>多元分析</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构note（五）</title>
    <url>/2023/08/09/blog17-DS5/</url>
    <content><![CDATA[<h2 id="树的定义">树的定义</h2>
<p>树(Tree)是n(n&gt;=0)个结点的有限集。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>若n=0，称为空树；</p>
</li>
<li class="lvl-2">
<p>若n&gt;0，则它满足如下两个条件：</p>
</li>
</ul>
<span id="more"></span>
<ul class="lvl-0">
<li class="lvl-2">
<p>有且仅有一个特定的称为<strong>根</strong>(Root)的结点；</p>
</li>
<li class="lvl-2">
<p>其余结点可分为m(m&gt;=0)个互不相交的有限集T1,T2,…,Tm，其中每一个集合本身又是一棵树，并称为根的子树(Subtree)。</p>
</li>
</ul>
<h2 id="基本术语">基本术语</h2>
<p>结点：数据元素以及指向子树的分支（特殊：没有前驱结点的结点叫根结点）</p>
<p>结点的度：结点拥有的子树的个数</p>
<p>叶子结点/终端结点：度=0的结点</p>
<p>分支结点：度≠0的结点，且除了根节点的分支结点称为内部结点</p>
<p>结点的子树的根称为该节点的孩子，该节点称为孩子的双亲。</p>
<p>根节点看成第一层，其孩子看成第二层，以此类推。双亲位于同一层上的结点称为堂兄弟。从根到该结点所经过分支上的所有结点称为结点的祖先，以某结点为根的子树中的任一结点称为结点的子孙。</p>
<p>树的度：树内各结点的度的最大值</p>
<p>树的深度/高度：树中结点的最大层次</p>
<p>有序树：树中结点的各个子树从左往右有次序（最左边为第一个孩子）</p>
<p>无序树：树中结点的各个子树无次序</p>
<p>森林：是m(m≥0)棵互不相交的树的集合（一棵树也是森林，把根节点删除后也能成为森林）</p>
<h2 id="二叉树">二叉树</h2>
<p>二叉树也即每个结点最多只有两个“叉”的树，研究二叉树的意义在于，普通树若不转化为二叉树，则运算很难实现。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>二叉树结构简单、规律性强；</p>
</li>
<li class="lvl-2">
<p>可以证明所有树对应唯一的二叉树，不失一般性。</p>
</li>
</ul>
<p>特点：</p>
<ol>
<li class="lvl-3">
<p>每个结点最多有两个孩子（二叉树不存在度大于2的结点）</p>
</li>
<li class="lvl-3">
<p>子树有左右之分，顺序不能颠倒</p>
</li>
<li class="lvl-3">
<p>可以是空集，可以有空左子树和空右子树</p>
</li>
</ol>
<blockquote>
<p>注：二叉树不是树的特殊情况，它们是两个概念。</p>
</blockquote>
<blockquote>
<p>具有三个结点的二叉树可能有几种不同形态？普通树呢？</p>
<p>答：二叉树有五种：左—（左，右）；左—左—左；左—左—右；左—右—左；左—右—右。</p>
<p>普通树则只有两种。所以说二叉树和树是两个概念。</p>
</blockquote>
<p>性质：</p>
<ol>
<li class="lvl-3">
<p>在二叉树的第i层上至多有$2^{i-1}$个结点(i≥1)，至少有1个结点。</p>
</li>
<li class="lvl-3">
<p>深度为k的二叉树至多有$2^k-1$个结点，至少k个结点。（k≥1，等比数列求和可证明）</p>
</li>
<li class="lvl-3">
<p>对任何一棵二叉树T，如果叶子数为$n_0$，度为2的结点数为$n_2$，则$n_0=n_2+1$。</p>
</li>
</ol>
<h3 id="满二叉树">满二叉树</h3>
<p>深度为k且有$2^k-1$个结点的二叉树称为<strong>满二叉树</strong>。其叶子结点均在最底层。</p>
<p>对满二叉树结点位置进行编号，规则是自上而下，自左而右。</p>
<h3 id="完全二叉树">完全二叉树</h3>
<p>深度为k具有n个结点的二叉树，当且仅当每一个结点都与深度为k的满二叉树中编号1~n的结点<strong>一一对应</strong>时，称之为<strong>完全二叉树</strong>。</p>
<blockquote>
<p>注：在满二叉树中从最后一个结点开始，连续去掉任意个结点，即是一棵完全二叉树。</p>
</blockquote>
<p>完全二叉树的叶子只可能分布在层次最大的两层，对任意结点，如果其右子树的最大层数为i，则其左子树的最大层次必为i或i+1。</p>
<p>具有n个结点的完全二叉树的深度为$\lfloor log_2n\rfloor+1$，这里$\lfloor x \rfloor$是指不大于x的最大整数，即向下取整。</p>
<p>设某个孩子结点的编号是i，则其双亲的编号是$\lfloor i/2 \rfloor$，这个孩子的左孩子编号为$2i$，右孩子为$2i+1$。</p>
<h2 id="二叉树的链式储存（二叉链表）">二叉树的链式储存（二叉链表）</h2>
<p>顺序储存有空间冗余过大的缺点，最好用于满二叉树和完全二叉树。这里主要介绍链式储存。</p>
<p>在n个结点的二叉链表中，有n+1个空指针域。这是因为总共2n个链域，除了根结点外每个结点都有一个双亲，所以有n-1个结点的链域存放指针。故空指针数目=2n-(n-1)=n+!。</p>
<h3 id="二叉树的遍历">二叉树的遍历</h3>
<p>即顺着某一条搜索路径巡访二叉树的结点，使得每个结点都被且仅被访问一次。</p>
<p>遍历的目的是得到树中所有结点的一个线性排列。</p>
<p>遍历是树结构插入、删除、修改、查找和排序运算的前提，是一切运算的基础和核心。</p>
<h3 id="遍历方法（一）">遍历方法（一）</h3>
<p>假设L：遍历左子树；D：访问根结点；R：遍历右子树</p>
<p>则遍历整个二叉树的方案有：DLR/DRL/LDR/LRD/RDL/RLD六种。</p>
<p>若规定先左后右，按根结点的访问顺序命名，则只有三种：</p>
<p>DLR：先（根）序遍历；</p>
<p>LDR：中（根）序遍历；</p>
<p>LRD：后（根）序遍历。</p>
<h3 id="通过已知中序和任意其他序确定唯一的二叉树">通过已知中序和任意其他序确定唯一的二叉树</h3>
<p>例：已知二叉树的先序和中序，构造出相应的二叉树。</p>
<p>先序：ABCDEFGHIJ</p>
<p>中序：CDBFEAIHGJ</p>
<p>这类确定的方法是先通过先序的第一个结点结合其在中序的位置确定左右子树的结点分配，在这里先序第一个结点为A，即根结点为A，A在中序的位置可以确定左子树包含CDBFE，右子树包含IHGJ，这样以此类推，就可以确定如下二叉树。</p>
<img title="" src="https://i2.100024.xyz/2023/08/07/pm9xfs.webp" alt="" data-align="center" width="209">
<p>在这个例子中就可以明显看出中序的作用了。</p>
<h3 id="遍历方法（二）">遍历方法（二）</h3>
<p>前面的方法是将二叉树看为L，D，R三个部分，这里的层次遍历法则是将二叉树按照层次顺序来遍历，即：从根节点开始，按从上到下，从左到右的方式访问每一个结点，每个结点仅访问一次。</p>
<p>算法思路是结合<strong>队列</strong>，①将根结点入队，②队不为空时循环：从队列中出列一个结点p，访问它；若它有左孩子则左孩子进队，有右孩子则右孩子进队。下面视频的2:54处有很形象的介绍。</p>
<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=82837069&bvid=BV1nJ411V7bd&cid=152257156&page=91" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
</div>
<hr>
<h2 id="具体实现">具体实现</h2>
<p>ADT定义：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> TElemType;<span class="comment">//可修改为其他数据类型</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">traverse</span> &#123; DLR = <span class="number">1</span>, LDR, LRD &#125;;<span class="comment">//遍历类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">class</span> <span class="title class_">BiNode</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    TElemType data;<span class="comment">//数据域</span></span><br><span class="line">    BiNode* lchild, * rchild;<span class="comment">//左孩子、右孩子指针</span></span><br><span class="line">&#125;BiNode,* BiTree;</span><br></pre></td></tr></table></figure>
<p>操作集：（这里只放了最基本的操作集）</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//判空</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">IsEmpty</span><span class="params">(BiTree BT)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (BT == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问二叉树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Visit</span><span class="params">(BiTree BT)</span> </span>&#123;</span><br><span class="line">    std::cout&lt;&lt;BT-&gt;data;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二叉树的遍历</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">Traversal</span><span class="params">(BiTree BT,traverse way)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (BT == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (way) &#123;</span><br><span class="line">        <span class="keyword">case</span> DLR: &#123;</span><br><span class="line">            <span class="built_in">Visit</span>(BT);</span><br><span class="line">            <span class="built_in">Traversal</span>(BT-&gt;lchild, DLR);</span><br><span class="line">            <span class="built_in">Traversal</span>(BT-&gt;rchild, DLR);</span><br><span class="line">        &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LDR: &#123;</span><br><span class="line">            <span class="built_in">Traversal</span>(BT-&gt;lchild, LDR);</span><br><span class="line">            std::cout &lt;&lt; BT-&gt;data;</span><br><span class="line">            <span class="built_in">Traversal</span>(BT-&gt;rchild, LDR);</span><br><span class="line">        &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> LRD: &#123;</span><br><span class="line">            <span class="built_in">Traversal</span>(BT-&gt;lchild, LRD);</span><br><span class="line">            <span class="built_in">Traversal</span>(BT-&gt;rchild, LRD);</span><br><span class="line">            <span class="built_in">Visit</span>(BT);</span><br><span class="line">        &#125;</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//先序创建二叉树</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">CreateBiTree</span><span class="params">(BiTree &amp;T)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    std::cin &gt;&gt; ch;</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;#&#x27;</span>) &#123;</span><br><span class="line">        T = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        T = <span class="keyword">new</span> BiNode;</span><br><span class="line">        T-&gt;data = ch;</span><br><span class="line">        <span class="built_in">CreateBiTree</span>(T-&gt;lchild);</span><br><span class="line">        <span class="built_in">CreateBiTree</span>(T-&gt;rchild);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里创建二叉树的函数中，由于要对实参进行修改，首先考虑指针，而BiTree已经是BiNode的指针了，再使用指针就会产生指针的指针，这对代码的阅读上不太方便，因此这里采用了引用。</p>
<p>参考资料：<a href="https://blog.csdn.net/Peealy/article/details/115835700">C++实现先序创建二叉树</a></p>
]]></content>
      <categories>
        <category>学习</category>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab复习</title>
    <url>/2023/08/11/blog18-Matlabreview/</url>
    <content><![CDATA[<p>自从考完研就把matlab扔了，现在为了后续的工作重新捡回来一些…</p>
<p>具体内容可看官方文档：<a href="https://ww2.mathworks.cn/help/matlab/index.html?s_tid=hc_panel">MATLAB Documentation</a>，这里只放一些常用的内容。</p>
<span id="more"></span>
<h2 id="语言基础">语言基础</h2>
<ul class="lvl-0">
<li class="lvl-2">
<p>输入命令</p>
</li>
</ul>
<p>ans是一个内置变量，储存最近的运算结果。clc为清除命令行窗口，clear为清除工作区变量</p>
<p>在matlab想要运行一个较长的代码块，往往需要建立脚本文件。</p>
<p>要输出文本，可以调用disp函数：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>输入命令为input函数，这里可以附上提示性文字：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">reply=input(<span class="string">&#x27;Would you like to see an echo?(y/n):&#x27;</span>,<span class="string">&#x27;s&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>%用于注释一行，%{ %}用于注释多行，%%用于脚本里的代码分块，运行时可以看每一块的运行结果。</p>
<p>在matlab中分号主要用于控制输出结果是否显示在命令行窗口。所以有时可不用分号。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>矩阵和数组</p>
</li>
</ul>
<p>创建数组的常用函数有：</p>
<p><code>zeros(n)</code>：返回值为一个n阶矩阵，元素均为0；</p>
<p><code>zeros(a,b)</code>：返回一个a行b列的全0矩阵；</p>
<p><code>ones(n)/ones(a,b)</code>：同上二者，元素全为1；</p>
<p><code>eye(n)</code>：返回n阶单位阵；</p>
<p><code>diag(n1,n2,..)</code>：创建对角元素为n1,n2,…的对角阵；</p>
<p><code>linspace(x1,x2,n)</code>：创建一个由区间[x1,x2]中的n个等间距点。n不填时默认为100；</p>
<p>还有冒号&quot;:&quot;的使用，如1:10就是一个1到10步长为1的向量。a：b：c代表从a到c步长为b的向量。</p>
<p>确定大小的函数为<code>size(x)</code>：x可以是向量也可以是矩阵</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>数据类型</p>
</li>
</ul>
<p>在matlab中可以不定义元素的数据类型，matlab会默认将数据存储为double类型。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>运算符和基本运算</p>
</li>
</ul>
<p>算术运算、关系运算、逻辑运算、集合运算、按位运算等。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>循环以及条件语句</p>
</li>
</ul>
<p>条件语法：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expression</span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">elseif</span> expression</span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>循环语法(for)：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> index=values</span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%例：以 -0.2 为步长递增，并显示值。</span></span><br><span class="line"><span class="keyword">for</span> v=<span class="number">1.0</span>:<span class="number">-0.2</span>:<span class="number">0.0</span></span><br><span class="line">    <span class="built_in">disp</span>(v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>循环语法(while)：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> expression</span><br><span class="line">    statements</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p><code>break</code>：用于终止循环</p>
<p><code>continue</code>：将控制传递给 <code>for</code> 或 <code>while</code> 循环的下一迭代</p>
<p><code>pause</code>：暂时停止执行 MATLAB</p>
<hr>
<h2 id="数据导入以及分析">数据导入以及分析</h2>
<p>一些文本文件：</p>
<table>
<thead>
<tr>
<th><a href="https://ww2.mathworks.cn/help/matlab/ref/load.html"><code>load</code></a></th>
<th>将文件变量加载到工作区中</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://ww2.mathworks.cn/help/matlab/ref/save.html"><code>save</code></a></td>
<td>将工作区变量保存到文件中</td>
</tr>
<tr>
<td><a href="https://ww2.mathworks.cn/help/matlab/ref/matlab.io.matfile.html"><code>matfile</code></a></td>
<td>访问和更改 MAT 文件中的变量，而不必将文件加载到内存中</td>
</tr>
<tr>
<td><a href="https://ww2.mathworks.cn/help/matlab/ref/disp.html"><code>disp</code></a></td>
<td>显示变量的值</td>
</tr>
<tr>
<td><a href="https://ww2.mathworks.cn/help/matlab/ref/formatteddisplaytext.html"><code>formattedDisplayText</code></a></td>
<td>以字符串形式捕获显示输出</td>
</tr>
<tr>
<td><a href="https://ww2.mathworks.cn/help/matlab/ref/who.html"><code>who</code></a></td>
<td>列出工作区中的变量</td>
</tr>
<tr>
<td><a href="https://ww2.mathworks.cn/help/matlab/ref/whos.html"><code>whos</code></a></td>
<td>列出工作区中的变量及大小和类型</td>
</tr>
<tr>
<td><a href="https://ww2.mathworks.cn/help/matlab/ref/clear.html"><code>clear</code></a></td>
<td>从工作区中删除项目、释放系统内存</td>
</tr>
<tr>
<td><a href="https://ww2.mathworks.cn/help/matlab/ref/clearvars.html"><code>clearvars</code></a></td>
<td>清除内存中的变量</td>
</tr>
<tr>
<td><a href="https://ww2.mathworks.cn/help/matlab/ref/openvar.html"><code>openvar</code></a></td>
<td>在变量编辑器或其他图形编辑工具中打开工作区变量</td>
</tr>
<tr>
<td><a href="https://ww2.mathworks.cn/help/matlab/ref/workspacebrowser.html"><code>workspace</code></a></td>
<td>Open Workspace browser to manage workspace</td>
</tr>
</tbody>
</table>
<p>图像文件常用函数；</p>
<table>
<thead>
<tr>
<th><a href="https://ww2.mathworks.cn/help/matlab/ref/imread.html"><code>imread</code></a></th>
<th>从图形文件读取图像</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://ww2.mathworks.cn/help/matlab/ref/imwrite.html"><code>imwrite</code></a></td>
<td>将图像写入图形文件</td>
</tr>
<tr>
<td><a href="https://ww2.mathworks.cn/help/matlab/ref/imshow.html"><code>imshow</code></a></td>
<td><strong>显示图像</strong></td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>学习</category>
        <category>Matlab</category>
      </categories>
      <tags>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title>聚类分析</title>
    <url>/2023/08/16/blog19-ClusterAnalyse/</url>
    <content><![CDATA[<blockquote>
<p>出于将认识的对象按照一些特征进行分类的必要，聚类分析（cluster analyses）作为一种定量方法，将从数据分析的角度，给出一个更准确、细致的分类工具。</p>
</blockquote>
<h3 id="1-相似性的刻画">1 相似性的刻画</h3>
<p>因为要对对象在数量的角度进行分类，所以要引入相似性的概念。相似的东西会被归为一类，这是自然的思想。如果对于一群有待分类的样本点需用$p$个变量描述，则每个样本点可以看成是$R^p$空间中的一个点。因此，很自然地想到可以用<mark>距离</mark>来度量样本点间的相似程度。</p>
<span id="more"></span>
<h4 id="1-1-样本间的相似性度量">1.1 样本间的相似性度量</h4>
<p>记$\Omega$是样本点集，距离$d(x,y)$是$\Omega\times\Omega\rightarrow R^+$的一个函数，满足条件：</p>
<ol>
<li class="lvl-3">
<p>$d(x,y)\ge0,x,y\in\Omega$;</p>
</li>
<li class="lvl-3">
<p>$d(x,y)=0$ 当且仅当 $x=y$;</p>
</li>
<li class="lvl-3">
<p>$d(x,y)=d(y,x)$;</p>
</li>
<li class="lvl-3">
<p>$d(x,y)\le d(y,z)+d(x,z),x,y,z\in\Omega$.</p>
</li>
</ol>
<p>即我们所知的正则性、对称性和三角不等式。在聚类分析中，对于定量变量最常用的是<a href="https://blog.csdn.net/weixin_43418104/article/details/88086075">Minkowski距离</a>。</p>
<p>而其中最常用的是<strong>欧式距离</strong>。其优点是当坐标轴正交旋转时，欧氏距离保持不变。</p>
<p>要注意采用Minkowski距离时，要采用相同量纲的变量，否则若测量值变异范围悬殊时，建议先进行数据标准化。此外，还应避免变量的多重相关性。其造成的信息重叠会片面强调某些变量的重要性。由于这些缺点的存在，一个改进的距离就是<strong>马氏距离</strong>，定义如下：</p>
<p>$$<br>
d( x,y ) =\sqrt{( x-y ) ^T\Sigma ^{-1}( x-y )}<br>
$$</p>
<p>x，y来自p维总体Z的样本观测值，$\Sigma$是Z的协方差矩阵。实际中$\Sigma$往往不知道，需要用样本协方差估计。马氏距离对所有线性变换是不变的，因此不受量纲影响。</p>
<h4 id="1-2-类与类间的相似性度量">1.2 类与类间的相似性度量</h4>
<p>如果有两个样本类$G_1,G_2$，可以用下面的方法测量距离：</p>
<ol>
<li class="lvl-3">
<p>最短距离法：</p>
<p>$$<br>
D( G_1,G_2) =\underset{\begin{array}{c}<br>
x_i\in G_1\<br>
y_j\in G_2\<br>
\end{array}}{\min}{ d( x_i,y_j)}<br>
$$</p>
</li>
<li class="lvl-3">
<p>最长距离法：</p>
<p>即上面的min改成max.</p>
</li>
<li class="lvl-3">
<p>重心法：</p>
<p>$$<br>
D(G_1,G_2) =d(\bar{x},\bar{y})<br>
$$</p>
</li>
<li class="lvl-3">
<p>类平均法</p>
</li>
<li class="lvl-3">
<p>离差平方和法</p>
</li>
</ol>
<h3 id="2-系统聚类法">2 系统聚类法</h3>
<h4 id="2-1-系统聚类法的功能和特点">2.1 系统聚类法的功能和特点</h4>
<p>生成聚类图的步骤：设$\Omega={w_1,w_2,…,w_n}$，</p>
<ol>
<li class="lvl-3">
<p>计算n个样本点两两之间的距离${d_{ij}}$，记为矩阵$D=(d_{ij})_{n\times n}$；</p>
</li>
<li class="lvl-3">
<p>首先构造n 个类，每一个类中只包含一个样本点，每一类的平台高度均为零；</p>
</li>
<li class="lvl-3">
<p>合并距离最近的两类为新类，并且以这两类间的距离值作为聚类图中的平台高度；</p>
</li>
<li class="lvl-3">
<p>计算新类与当前各类的距离，若类的个数已经等于1，转入步骤5，否则，回到步骤3；</p>
</li>
<li class="lvl-3">
<p>画聚类图；</p>
</li>
<li class="lvl-3">
<p>决定类的个数和类。</p>
</li>
</ol>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">clc,clear </span><br><span class="line">a=[<span class="number">1</span>,<span class="number">0</span>;<span class="number">1</span>,<span class="number">1</span>;<span class="number">3</span>,<span class="number">2</span>;<span class="number">4</span>,<span class="number">3</span>;<span class="number">2</span>,<span class="number">5</span>]; </span><br><span class="line">[m,n]=<span class="built_in">size</span>(a); <span class="comment">%m为行指标，n为列指标</span></span><br><span class="line">d=<span class="built_in">zeros</span>(m,m); </span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:m </span><br><span class="line"> <span class="keyword">for</span> <span class="built_in">j</span>=<span class="built_in">i</span>+<span class="number">1</span>:m </span><br><span class="line"> d(<span class="built_in">i</span>,<span class="built_in">j</span>)=mandist(a(<span class="built_in">i</span>,:),a(<span class="built_in">j</span>,:)&#x27;); <span class="comment">%曼哈顿距离</span></span><br><span class="line"> <span class="keyword">end</span> </span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line">d <span class="comment">%d即距离矩阵</span></span><br><span class="line">nd=nonzeros(d); </span><br><span class="line">nd=union(nd,nd) <span class="comment">%把该向量中的重复元素删除</span></span><br><span class="line"><span class="keyword">for</span> <span class="built_in">i</span>=<span class="number">1</span>:m<span class="number">-1</span> </span><br><span class="line"> nd_min=<span class="built_in">min</span>(nd); </span><br><span class="line"> [row,col]=<span class="built_in">find</span>(d==nd_min);tm=union(row,col);<span class="comment">%tm用于记录某个样本点位置，删去重复元素，因为该矩阵为上三角</span></span><br><span class="line"> tm=<span class="built_in">reshape</span>(tm,<span class="number">1</span>,<span class="built_in">length</span>(tm));<span class="comment">%将tm转为行向量</span></span><br><span class="line"> s(<span class="built_in">i</span>)=&#123;char([<span class="string">&#x27;第&#x27;</span>,int2str(<span class="built_in">i</span>),<span class="string">&#x27;次合成，平台高度为&#x27;</span>,num2str(nd_min),<span class="string">&#x27;时将：&#x27;</span>,int2str(tm),<span class="string">&#x27;合成&#x27;</span>])&#125;; </span><br><span class="line"> <span class="comment">%上面大括号&#123;&#125;代表建立cell</span></span><br><span class="line"> nd(<span class="built_in">find</span>(nd==nd_min))=[]; <span class="comment">%每次合成完删除该高度</span></span><br><span class="line"> <span class="keyword">if</span> <span class="built_in">length</span>(nd)==<span class="number">0</span> </span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"> <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">s(:) <span class="comment">%输出最终结果。其实这个最终结果的可读性不是很好，但该算法的普适性比较好</span></span><br><span class="line"><span class="comment">%或者使用MATLAB统计工具箱的相关命令，编写如下程序： </span></span><br><span class="line"><span class="comment">% clc,clear</span></span><br><span class="line"><span class="comment">% a=[1,0;1,1;3,2;4,3;2,5];</span></span><br><span class="line"><span class="comment">% y=pdist(a,&#x27;cityblock&#x27;);yc=squareform(y)</span></span><br><span class="line"><span class="comment">% z=linkage(y)</span></span><br><span class="line"><span class="comment">% [h,t]=dendrogram(z)</span></span><br></pre></td></tr></table></figure>
<h3 id="3-变量聚类法">3 变量聚类法</h3>
<p>如果在选取指标时，太过细致导致变量多而重叠度（相关度）过高，会给建模与数据分析带来很多不便。因此，人们常常希望能研究变量间的相似关系，按照变量的相似关系把它们聚合成若干类，进而找出影响系统的主要因素，比如主因子法等。</p>
<h4 id="3-1-变量相似性度量">3.1 变量相似性度量</h4>
<p>在对变量进行聚类分析时，首先要确定变量的相似性度量，常用的变量相似性度量有两种：</p>
<ol>
<li class="lvl-3">
<p>相关系数</p>
</li>
<li class="lvl-3">
<p>夹角余弦</p>
</li>
</ol>
<h4 id="3-2-变量聚类法">3.2 变量聚类法</h4>
<p>类似于样本集合聚类分析中最常用的最短距离法、最长距离法等，变量聚类法采用了与系统聚类法相同的思路和过程。在变量聚类问题中，常用的有最大系数法、最小系数法等。</p>
<p>通过这样的操作就可以把一些距离近的变量归为一类，从而达到降维的效果。</p>
<hr>
<h3 id="4-案例分析">4 案例分析</h3>
<p>下表是1999 年中国省、自治区的城市规模结构特征的一些数据，以latex的代码形式呈现，要对其使用聚类分析来分类。</p>
<p>\begin{table}[htbp]<br>
\centering<br>
\caption{Add caption}<br>
\begin{tabular}{cccccc}<br>
省、自治区 &amp; 城市规模 (万人) &amp; 城市首位度 &amp; 城市指数  &amp; 基尼系数  &amp; 城市规模中位 值(万人) \<br>
京津冀   &amp; 699.70  &amp; 1.4371  &amp; 0.9364  &amp; 0.7804  &amp; 10.880  \<br>
山西    &amp; 179.46  &amp; 1.8982  &amp; 1.0006  &amp; 0.5870  &amp; 11.780  \<br>
内蒙古   &amp; 111.13  &amp; 1.4180  &amp; 0.6772  &amp; 0.5158  &amp; 17.775  \<br>
辽宁    &amp; 389.60  &amp; 1.9182  &amp; 0.8541  &amp; 0.5762  &amp; 26.320  \<br>
吉林    &amp; 211.34  &amp; 1.7880  &amp; 1.0798  &amp; 0.4569  &amp; 19.705  \<br>
黑龙江   &amp; 259.00  &amp; 2.3059  &amp; 0.3417  &amp; 0.5076  &amp; 23.480  \<br>
苏沪    &amp; 923.19  &amp; 3.7350  &amp; 2.0572  &amp; 0.6208  &amp; 22.160  \<br>
浙江    &amp; 139.29  &amp; 1.8712  &amp; 0.8858  &amp; 0.4536  &amp; 12.670  \<br>
安徽    &amp; 102.78  &amp; 1.2333  &amp; 0.5326  &amp; 0.3798  &amp; 27.375  \<br>
福建    &amp; 108.50  &amp; 1.7291  &amp; 0.9325  &amp; 0.4687  &amp; 11.120  \<br>
江西    &amp; 129.20  &amp; 3.2454  &amp; 1.1935  &amp; 0.4519  &amp; 17.080  \<br>
山东    &amp; 173.35  &amp; 1.0018  &amp; 0.4296  &amp; 0.4503  &amp; 21.215  \<br>
河南    &amp; 151.54  &amp; 1.4927  &amp; 0.6775  &amp; 0.4738  &amp; 13.940  \<br>
湖北    &amp; 434.46  &amp; 7.1328  &amp; 2.4413  &amp; 0.5282  &amp; 19.190  \<br>
湖南    &amp; 139.29  &amp; 2.3501  &amp; 0.8360  &amp; 0.4890  &amp; 14.250  \<br>
广东    &amp; 336.54  &amp; 3.5407  &amp; 1.3863  &amp; 0.4020  &amp; 22.195  \<br>
广西    &amp; 96.12  &amp; 1.2288  &amp; 0.6382  &amp; 0.5000  &amp; 14.340  \<br>
海南    &amp; 45.43  &amp; 2.1915  &amp; 0.8648  &amp; 0.4136  &amp; 8.730  \<br>
川渝    &amp; 365.01  &amp; 1.6801  &amp; 1.1486  &amp; 0.5720  &amp; 18.615  \<br>
云南    &amp; 146.00  &amp; 6.6333  &amp; 2.3785  &amp; 0.5359  &amp; 12.250  \<br>
贵州    &amp; 136.22  &amp; 2.8279  &amp; 1.2918  &amp; 0.5984  &amp; 10.470  \<br>
西藏    &amp; 11.79  &amp; 4.1514  &amp; 1.1798  &amp; 0.6118  &amp; 7.315  \<br>
陕西    &amp; 244.04  &amp; 5.1194  &amp; 1.9682  &amp; 0.6287  &amp; 17.800  \<br>
甘肃    &amp; 145.49  &amp; 4.7515  &amp; 1.9366  &amp; 0.5806  &amp; 11.650  \<br>
青海    &amp; 61.36  &amp; 8.2695  &amp; 0.8598  &amp; 0.8098  &amp; 7.420  \<br>
宁夏    &amp; 47.60  &amp; 1.5078  &amp; 0.9587  &amp; 0.4843  &amp; 9.730  \<br>
新疆    &amp; 128.67  &amp; 3.8535  &amp; 1.6216  &amp; 0.4901  &amp; 14.470  \<br>
\end{tabular}%<br>
\label{tab:addlabel}%<br>
\end{table}%</p>
<p>计算的MATLAB程序如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line"><span class="comment">%% 数据处理</span></span><br><span class="line">clear;clc;close all;</span><br><span class="line">data=xlsread(<span class="string">&#x27;数据.xlsx&#x27;</span>,<span class="string">&#x27;Sheet1&#x27;</span>,<span class="string">&#x27;B2:F28&#x27;</span>);</span><br><span class="line">[~,name]=xlsread(<span class="string">&#x27;数据.xlsx&#x27;</span>,<span class="string">&#x27;Sheet1&#x27;</span>,<span class="string">&#x27;A2:A28&#x27;</span>);</span><br><span class="line">[n,~]=<span class="built_in">size</span>(data);</span><br><span class="line">zs_data=zscore(data);<span class="comment">%去中心化</span></span><br><span class="line">distance_data=pdist(zs_data,<span class="string">&quot;euclidean&quot;</span>);<span class="comment">%计算距离</span></span><br><span class="line">D=squareform(distance_data);<span class="comment">%生成距离矩阵</span></span><br><span class="line"></span><br><span class="line"><span class="comment">%% 系统聚类法</span></span><br><span class="line">z=linkage(D,<span class="string">&quot;average&quot;</span>);<span class="comment">%生成cluster树数据</span></span><br><span class="line"><span class="built_in">figure</span>(<span class="number">1</span>);</span><br><span class="line">[h,t]=dendrogram(z,<span class="string">&quot;Labels&quot;</span>,name,<span class="string">&#x27;ColorThreshold&#x27;</span>,<span class="string">&#x27;default&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>得到的聚类树如下：<br>
<img title="" src="https://i2.100024.xyz/2023/08/19/p532ap.webp" alt="color_tree" data-align="center" width="568"></p>
<p>可以看到采用欧氏距离后产生的聚类树，宏观可以分成三类。</p>
]]></content>
      <categories>
        <category>学习</category>
        <category>多元分析</category>
      </categories>
      <tags>
        <tag>多元分析</tag>
      </tags>
  </entry>
  <entry>
    <title>备案与毕业</title>
    <url>/2023/05/13/blog2/</url>
    <content><![CDATA[<p>  经历了长达十多天的备案，终于在昨天过审了。</p>
<span id="more"></span>
<p>  根据规定，这段时间不能访问域名，也就一直没有更新。昨晚九点得知过审后遂启动域名，奇怪的是<code>hexo cl</code>,<code>hexo g</code>都能使用，唯独<code>hexo d</code>一直报错，无法成功部署。</p>
<p>  <code>hexo s</code>本地渲染也没问题，并且在家也没有出现过这种情况，那么猜测就是网络的问题，我想备案的这几天从家里到学校了，网络的影响应该很大。网上找了很多教程，最后搞到凌晨1点，发现断开学校宽带，连手机热点就解决了🤣难绷…</p>
<p>  十几天内，我给网站添加了“关于”板块，用<code>&amp;emsp;</code>进行首行缩进；参与了毕业论文的答辩，也拍了毕业照，本科生涯渐渐以倒数计时，朋友们都在抓紧时间记录、分享以及欢庆。这让我想到高中毕业时，每个人都在留言板上写一句话，我用当时所学的vb语言写了一小段代码，具体内容我难以记起，大致内容就是有一个按钮，按下就可以将系统时间暂停。</p>
<p>  还有一位令人怀念的朋友这样写：</p>
<blockquote>
<p>“明天会更好。”</p>
</blockquote>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>人生</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo d错误：spawn failed的一种解决方法</title>
    <url>/2023/05/15/blog3/</url>
    <content><![CDATA[<p>  继上一条，这几天内部署断断续续的报错，网上的教程都不适用，和朋友交流后终于有了一个稳定的解决方法。</p>
<span id="more"></span>
<p>  报错内容大概是这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Please make sure you have the correct access rights</span><br><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: Spawn failed</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt;(D:\Blog\node_modules hexo-util\lib\spawn.js:51:21)</span><br><span class="line">    at ChildProcess.emit (node:events:513:28)</span><br><span class="line">    at cp.emit (D:\Blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">    at ChildProcess._handle.onexit (node:internal/chid_process:291:12)</span><br></pre></td></tr></table></figure>
<p>  确定是网络的原因后，可以作如下尝试：</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>获取steam++这款软件（github可以搜索到，也有其他选择）</p>
</li>
<li class="lvl-2">
<p>打开steam++并加速github</p>
</li>
<li class="lvl-2">
<p>命令行输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:443</span><br><span class="line">git config --global https.proxy http://127.0.0.1:443</span><br></pre></td></tr></table></figure>
</li>
<li class="lvl-2">
<p>最后<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code>应该就能成功了🥰</p>
</li>
</ul>
<p>  这篇文章希望给一些同样有该问题但网上教程都不适用的朋友一点参考。</p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Next主题更改引用blockquote以及内嵌代码code的颜色</title>
    <url>/2023/05/19/blog4/</url>
    <content><![CDATA[<h5 id="Next版本：7-8-0">Next版本：7.8.0</h5>
<p>  因为设置了背景，所以往往有统一颜色的需求，此时占比较大的引用和代码的颜色较为明显，如果采用默认颜色会比较难看。在相同Next主题和版本下，可以这样设置：</p>
<span id="more"></span>
<ul class="lvl-0">
<li class="lvl-2">
<p>块引用</p>
</li>
</ul>
<p>  首先cd到<code>..\next\source\css\_common\scaffolding</code>找到<code>base.styl</code>文件，打开ctrl+F搜索blockquote，对代码进行如下编辑：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">blockquote</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#d0a7020d</span>;</span><br><span class="line">  <span class="attribute">border-left</span>: <span class="number">4px</span> solid <span class="number">#d0a702</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--blockquote-color);</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">cite</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中background是引用块的背景颜色，border-left即左边粗竖线的颜色，对#后面改成自己喜欢的颜色后重新部署即可。</p>
<ul class="lvl-0">
<li class="lvl-2">
<p>内嵌代码</p>
</li>
</ul>
<p>  cd到<code>..\next\source\css\_variables</code>找到<code>base.styl</code>文件，打开找到code-background，同样将后面的颜色进行修改即可。</p>
<p>  由于我还没有设置图床，就不放图片演示了😶</p>
<p>  最后，如果版本不一致，也可以用开发者工具找到源代码进行修改。</p>
]]></content>
      <categories>
        <category>经验</category>
        <category>Next美化</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>响应式Bilibili视频代码块测试</title>
    <url>/2023/05/24/blog5/</url>
    <content><![CDATA[<p>  首先在b站点击分享，复制嵌入代码，再按照如下格式编辑：</p>
<span id="more"></span>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: relative; width: 100%; height: 0; padding-bottom: 75%;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;//player.bilibili.com/player.html?aid=986143204&amp;bvid=BV1Ft4y1A73f&amp;cid=851363812&amp;page=1&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">framespacing</span>=<span class="string">&quot;0&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>下面是测试的效果：</p>
<div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
    <iframe src="//player.bilibili.com/player.html?aid=986143204&bvid=BV1Ft4y1A73f&cid=851363812&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>
</div>
]]></content>
      <categories>
        <category>经验</category>
        <category>Next美化</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>更新Next主题：v7.8-&gt;v8.16</title>
    <url>/2023/05/26/blog6/</url>
    <content><![CDATA[<p>  由于需要换valine为waline或twikoo，以及各种由于Next版本低导致的问题（相关的网络资源少、教程少等等），今天下定决心更新一下版本。</p>
<span id="more"></span>
<h4 id="Hexo-version-6-3；Next-version-7-8">Hexo version: 6.3；Next version:7.8</h4>
<p>  知道更新版本有一定的风险，于是做好了旧版本的备份。最终没有太大的损失，只是先前自定义的一些样式由于文件发生改变而失效，这些会在后续重新补充。</p>
<p>  更新版本参考教程：<a href="https://drifter-games.com/2021/nextupdate/">https://drifter-games.com/2021/nextupdate/</a></p>
]]></content>
      <categories>
        <category>经验</category>
        <category>Next升级</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>C++文本操作：文本文件的读写</title>
    <url>/2023/05/30/blog8-cpptxtwrite/</url>
    <content><![CDATA[<h3 id="写文件">写文件</h3>
<ol>
<li class="lvl-3">
<p>包含头文件：<code>#include &lt;fstream&gt;</code></p>
</li>
<li class="lvl-3">
<p>创建流对象：<code>ofstream ofs;</code></p>
<span id="more"></span>
</li>
<li class="lvl-3">
<p>打开文件：<code>ofs.open(&quot;Url&quot;,打开方式)</code></p>
<p>（如果路径处只写了文件名，则会保存在同级文件夹下）</p>
<table>
<thead>
<tr>
<th style="text-align:left">打开方式</th>
<th style="text-align:left">解释</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ios::in</td>
<td style="text-align:left">为读文件而打开文件</td>
</tr>
<tr>
<td style="text-align:left">ios::out</td>
<td style="text-align:left">为写文件而打开文件</td>
</tr>
<tr>
<td style="text-align:left">ios::ate</td>
<td style="text-align:left">初始位置为文件尾</td>
</tr>
<tr>
<td style="text-align:left">ios::app</td>
<td style="text-align:left">追加方式写文件</td>
</tr>
<tr>
<td style="text-align:left">ios::trunc</td>
<td style="text-align:left">先删除，再创建</td>
</tr>
<tr>
<td style="text-align:left">ios::binary</td>
<td style="text-align:left">二进制方式</td>
</tr>
</tbody>
</table>
</li>
<li class="lvl-3">
<p>写数据：<code>ofs &lt;&lt; &quot;写入的数据&quot;</code>（可以加入<code>&lt;&lt; endl;</code>来换行）</p>
</li>
<li class="lvl-3">
<p>关闭文件：<code>ofs.close();</code></p>
</li>
</ol>
<h5 id="示例：">示例：</h5>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span><span class="comment">//1.头文件的包含</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2.创建流对象</span></span><br><span class="line">    ofstream ofs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.指定打开方式</span></span><br><span class="line">    ofs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::out);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.写内容</span></span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;姓名：张三&quot;</span> &lt;&lt; endl;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;性别：男&quot;</span> &lt;&lt; endl;</span><br><span class="line">    ofs &lt;&lt; <span class="string">&quot;年龄：18&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.关闭文件</span></span><br><span class="line">    ofs.<span class="built_in">close</span>();</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;写入成功！&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="读文件">读文件</h3>
<ol>
<li class="lvl-3">
<p>包含头文件：<code>#include &lt;fstream&gt;</code></p>
</li>
<li class="lvl-3">
<p>创建流对象：<code>ofstream ifs;</code></p>
</li>
<li class="lvl-3">
<p>打开文件并判断是否成功打开：<code>ifs.open(&quot;Url&quot;,打开方式)</code></p>
<p>（判断打开方式见代码）</p>
</li>
<li class="lvl-3">
<p>读数据：有四种方式，各有特点</p>
</li>
<li class="lvl-3">
<p>关闭文件：<code>ifs.close();</code></p>
</li>
</ol>
<h5 id="示例：-v2">示例：</h5>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span><span class="comment">//1.包含头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2.创建流对象</span></span><br><span class="line">    ifstream ifs;</span><br><span class="line">    <span class="comment">//3.打开文件并判断是否打开成功</span></span><br><span class="line">    ifs.<span class="built_in">open</span>(<span class="string">&quot;test.txt&quot;</span>, ios::in);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!ifs.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;文件打开失败&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.读数据</span></span><br><span class="line">    <span class="comment">//第一种（C风格字符串1）</span></span><br><span class="line">    <span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line">    <span class="comment">//while (ifs &gt;&gt; buf) &#123;</span></span><br><span class="line">    <span class="comment">//    cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种（C风格字符串2）</span></span><br><span class="line">    <span class="comment">//char buf[1024] = &#123; 0 &#125;;</span></span><br><span class="line">    <span class="comment">//while (ifs.getline(buf, sizeof(buf))) &#123;</span></span><br><span class="line">    <span class="comment">//    cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三种（CPP风格字符串）</span></span><br><span class="line">    <span class="comment">//string buf;</span></span><br><span class="line">    <span class="comment">//while (getline(ifs, buf)) &#123;</span></span><br><span class="line">    <span class="comment">//    cout &lt;&lt; buf &lt;&lt; endl;</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第四种（单字符）</span></span><br><span class="line">    <span class="type">char</span> c;</span><br><span class="line">    <span class="keyword">while</span> ((c = ifs.<span class="built_in">get</span>()) != EOF)<span class="comment">//EOF=end of file</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.关闭文件</span></span><br><span class="line">    ifs.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">test01</span>();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo-Next鼠标指针自定义</title>
    <url>/2023/05/27/blog7/</url>
    <content><![CDATA[<h4 id="准备材料">准备材料</h4>
<p>  <code>.cur</code>或者<code>.ico</code>文件，不能太大（我试过超过1MB的素材不可用），<code>.ani</code>动态光标没试成功过。这些资源可以在<a href="https://zhutix.com/tag/cursors/">致美化</a>等途径中找到。</p>
<span id="more"></span>
<p>  这些文件建议下载到<code>../themes/source/images</code>中，也可以不下载而采用cdn。</p>
<p>  这里Next版本为8.16。</p>
<h4 id="文件修改">文件修改</h4>
<p>  在<code>yourBlog/themes/next/source/css/_common/scaffolding</code>中找到<code>base.styl</code>，对里面的代码行进行编辑：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">+ <span class="attribute">cursor</span>: <span class="built_in">url</span>(/images/yourArrow.cur), auto;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--body-bg-color);</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--text-color);</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="variable">$font</span>-family-base;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="variable">$font</span>-size-base;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="variable">$line</span>-height-base;</span><br><span class="line">  <span class="attribute">min-height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">transition</span>: padding <span class="variable">$transition</span>-ease;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  在添加的这行代码里将<code>yourArrow.cur</code>改为下载的素材名即可。这个地方一般是放指针型鼠标，下面还有一个区域需要编辑：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">+ <span class="attribute">cursor</span>: <span class="built_in">url</span>(/images/yourHand.cur), auto<span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="variable">$link</span>-decoration-color;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--link-color);</span><br><span class="line">  <span class="comment">// For a:not(:any-link)</span></span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">outline</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  这个位置一般放的是手型鼠标，也就是将鼠标悬在链接上会变化成的手型样式，同样将<code>yourHand.cur</code>改成下载的素材名。</p>
<h4 id="重新部署">重新部署</h4>
<p>  修改后可以先在本地看看效果，如果成功，最后hexo三件套即可。</p>
<p>下面再附上很多博客在用的鼠标指针cdn：</p>
<blockquote>
<p><a href="https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201071208706.cur">https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201071208706.cur</a><br>
<a href="https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201071205091.cur">https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201071205091.cur</a></p>
</blockquote>
<p>对应指针型和手型，效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201071208706.cur" alt="Arrow"></p>
<p><img src="https://cdn.jsdelivr.net/gh/kaix2301/pictures/img202201071205091.cur" alt="Hand"></p>
<p>用法就是将url括号里的链接替换为上述链接。</p>
]]></content>
      <categories>
        <category>经验</category>
        <category>Next美化</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>更改waline主题颜色</title>
    <url>/2023/06/03/blog9-stylDIY/</url>
    <content><![CDATA[<p>  之前就想自定义waline的样式以适配当前的背景图，但又因为没学过css，也不会自己上传cdn，所以向waline的开发者求助，最后知道了<code>!important</code>大法，希望能给到和我一样没接触过css的博主一些参考。</p>
<span id="more"></span>
<ul class="lvl-0">
<li class="lvl-2">
<h3 id="修改主题配置文件">修改主题配置文件</h3>
</li>
</ul>
<p>  在<code>.../next</code>下的<code>_config.yml</code>文件中搜索<code>custom file paths</code>，这是自定义文件的路径，将<code>#style: source/_data/styles.styl</code>前面的<code>#</code>去掉，并且到这个路径下创建对应的文件夹和文件，这样可以在<code>styles.styl</code>中自定义样式并覆盖主题的样式，并且方便后续的维护和更改。</p>
<ul class="lvl-0">
<li class="lvl-2">
<h3 id="定位到需要修改的样式">定位到需要修改的样式</h3>
</li>
</ul>
<p>  在自己的博客页面检查需要修改的元素，比如我要修改waline的按钮颜色，那么右键按钮检查就可以调出开发者工具：</p>
<p><img src="https://i2.100024.xyz/2023/06/03/qrzy72.webp#pic_center" alt=""></p>
<p><img src="https://i2.100024.xyz/2023/06/03/qrzydi.webp#pic_center" alt=""></p>
<p>可以看到这个按钮的样式代码，发现这里的颜色统一采用了一个全局样式<code>--waline-theme-color</code>，如果能将这个元素覆盖掉，那就不用一一修改了。</p>
<p>  将鼠标悬浮到这个按钮后是另一个颜色，这里查看源代码可以看到悬浮时的样式：</p>
<p><img src="https://i2.100024.xyz/2023/06/03/qyh9ep.webp#pic_center" alt=""></p>
<p>在<code>active</code>处同样采用了一个全局颜色<code>--waline-active-color</code>，那么要做的就是把这两个颜色覆盖掉。再进行查找可以找到全局声明：</p>
<p><img src="https://i2.100024.xyz/2023/06/03/qrzvws.webp#pic_center" alt=""></p>
<p>这里就包含了主题原来的颜色。由于我已经进行了修改，所以图片显示的是已被覆盖的样子。</p>
<ul class="lvl-0">
<li class="lvl-2">
<h3 id="important覆盖样式">!important覆盖样式</h3>
</li>
</ul>
<p>  由于waline插件的import采用的是官方提供的cdn，想要在本地修改样式就需要以覆盖的形式。这里我们打开开始所创建的<code>styles.styl</code>，在里面写入：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--waline-theme-color</span>: <span class="number">#4b3425</span> !important;</span><br><span class="line">  <span class="attr">--waline-active-color</span>: <span class="number">#9c8877</span> !important;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>颜色改成需要的颜色即可。</p>
<p>  效果可以参考评论区，修改全局样式的好处就是可以做到很方便的统一：</p>
<p><img src="https://i2.100024.xyz/2023/06/03/rah08z.webp#23pic_center" alt=""></p>
<p>  可以看到在后面加入<code>!important</code>后，此声明将覆盖任何其他声明。但是这样做会破坏样式表中的固有的级联规则，使得找bug变得困难，所以不推荐大量使用，有条件的还是建议自己将官方css文件进行修改并上传cdn导入自己的主题。</p>
]]></content>
      <categories>
        <category>经验</category>
        <category>Next美化</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Css</tag>
      </tags>
  </entry>
  <entry>
    <title>20889;32473;26045;22025;35946;</title>
    <url>/2023/06/18/linbiezengyan/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码不太对捏" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7a5e939dbee177c124444d4e5070c2254d4bca5d513f53111bde3cf0c9d40b6e">e80960072eee56390c5704dab6ba0fae854db6dc0f835e374d2013bd94f4e08446a64f0f00b2e823f15c8b4d25422063807c03848af83195d447827db04ea04c11f9e6cc59be5ced9772478f31e7921bab1b8072bca090176edb64c256d9cb08a1f96d5ed9b3865957b5d4689104d11090373b5e76163d612ba0a36891740765c1976f7277f59c5c593087238d40e9ad126c850392c1457fba027cf9c2a5d391274fb74d1a71c88dd02079dc9ba0e8d3ba6ffb414c63ac7298933baa06914741b58cd643218b85dabea50b61721c9265e249e2cc655263fc7dba5889c6aa83961ae314b4ce348a9c59e61c62a21064d3715eae3030b120994e20db3ebe15a7aa3d47c3e029a1d39a8e5c4f5bb57ece3ed42b28d11a171889b742788de07eba7dd9c27fdaff27119bd9f2dc396b1727a43af4c74841f20404d72bad8b8796ac6b8c121d488a69671570633d672c8585176a925e5eba9b1e3e4a675245b1871ce768e50d32debef7cb7033071129ec4bf98cc6a5e30f89281fa26658821f7e3a5d5cdaf1669f909e20ddbfd0be7d07f7da4b9f9adb71127ab03e6e744ebe499ed02fdbdfff21af8aae11efaf5497386c1a34782e0bad69bb8710f43813154e0d22eff26a030f4d47aa28f1596ae6c05f4d6a50ce21af7ef75f9c0fcdd8bc3af04a8f83e5e527d151eae69bd9e7455ddaaa2af222fe1df8025142df6094b10da56bfffa6dc1e8c043a59683c2518f9d0683b2623192fb756538fcdcb6677cd75f6f16959d3b6127282d39c41ae0ef4291bf010aadf09eea0977acfeb11e023399be4814cbd46a09cc259ce2c83c7a27d43158b4e6ade8360db8a15744ebd4e0c8309dc37c45d5292806e6fe1abe26ce08adc466d893da7abb45906e104b3cf72e089f1dda74449cae8943ca379b30063102f86c392ee6bcadbc02d82bbc90ed1ac84aa560abcc83f44cf73276b73c0978509510d49b2302df463f08a234da96a77f274da4276a636ccc6321c7dedb31d1dfd48e5aac3dea1f9c633e48e497ab60f225ce4a47ae0415f348e508a49af8130961705489bb0f4df1b98b0fd79c791e7c96f3c562adc37a7b614045dda449ca08167038b3afa350af25f4ece3e34b49f0c84b72fc35f1ba2ea4e8f80190b994e508d48f7456215381dfe40d11159f1eba61681de87770f50a3628fb948538415ede7bc0d8f2f0b4306d28ada047b173791c743bc27d78beac7e1cb37aceaeb7d2930e2f0c778f1aeab90f7ee73ed408f724022367cc5bea018a4077af1fe23059ef7a039857f5d8d3bd30bdbe40c6953d392779b14d92cc5a41217a36425cd025ba1bc397664f2927af07a3fa92dceb341b1629cd8f1d7f20291afbc42811fb276a07b19498be01fb2a26235fe14303ca1e0b2639247a5ded8c4891e45d247bcf6cc2975c7befeffa21913de8263850ffa0faab433403b100dcc8bdca0798514e38c1848cfbec253f72b510de6383fe5b46719e267b2fabc3cea735cce81474a727945247347cce14714f19e22b75021f8d56d7b6b95a43c19e4682b151f73e6a273d8e3b1db235d3897d81f374fe1c183c0a52b256d6f0c98aa650c7bfdbcf62b7096d9a510d0120e4f957a3f6c3c09a203b8b6aee2d773d28a31e8bb93d083e963cef037d407abca14fc6bb3f5212e92a50fd36bb1cc6b5d85f3c80fc68f0f6adb997f3d0e4986132d4c7781c2aedee4c72b3170218e2e7fa3c66f4d079b6a5471b84a8fe07904d9289c535f9d9be0b85944fa36e7cb7e9d024eaf5222b1d91e6b5e124dbba1080d325533470510479fa23dc405e677a739311f5af3b1b5d1b9510d70b9e0fdb6448b0ac018448803806ff35a5be4c8e432bf554a640eb678d7cf05e8965fb60139b07328e3a6e68b2520c440b94fce46e0f067ae2bdc58ac61626adc33d74e5aaf94530252c891c2701ba572109f31371827ac92fd66ddda68d881584e52134a79783355da4af260e17bebc120e25a433b315d4a8764280bb7e77e0f5a9dc023b53416a466c6f851afe90931a40db98feae2cdb7a4e2bf762cc561eb748004affdef0aeb8f5ebc5fa4dbcc028d70223bbc773b1a7b5947b24d45764564128c4c978bd18e578a5a0ab12331c6038f5ed1bb1fbb9c2f8c49d027d603baadc78490a930d93764793b4d83ff93dd7acdb21e6afc7e1a69a5d34afe0e6fb2929f84421d3cf8b0a41079ed75ee498e7e7fff47f009175b37a55fd41397e43dc29c077ed31f03c991e9c2a1205b6998f850544de3817a970df4b3c97eba5d168ad549e2d807cfac1a52569f78e8f1a67917483662e839a2b704f2abc27f48ee1ceb2901e3b4e8c3e7caaed8f82486ce2ccc3019563624841889b41d4</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是一个加密内容，需要密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>临别赠言</category>
      </categories>
      <tags>
        <tag>加密内容</tag>
      </tags>
  </entry>
  <entry>
    <title>一些庵野秀明风格的尝试</title>
    <url>/2023/06/23/goodbye-graduate/</url>
    <content><![CDATA[<h2 id="再见了，所有的张秀梅">再见了，所有的张秀梅</h2>
<p>😎</p>
<p>🤏🕶️</p>
<p>😭</p>
<span id="more"></span>
<p><img src="https://i2.100024.xyz/2023/06/23/r3edka.webp" alt="1"></p>
<p><img src="https://i2.100024.xyz/2023/06/23/r3evqt.webp" alt="2"></p>
<p><img src="https://i2.100024.xyz/2023/06/23/r3f4wp.webp" alt="3"></p>
<hr>
<h3 id="参考教程：">参考教程：</h3>
<ol>
<li class="lvl-3">
<p><a href="https://www.bilibili.com/video/BV1Uf4y1n7zK/?spm_id_from=333.788.recommend_more_video.4&amp;vd_source=e86cb514a2080267c3cb770f30a907f6">《One Last Kiss》专辑封面制作</a></p>
</li>
<li class="lvl-3">
<p><a href="https://www.bilibili.com/video/BV14L411S7fu/?spm_id_from=333.999.0.0&amp;vd_source=e86cb514a2080267c3cb770f30a907f6">字体、图片素材和背景音乐等</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
      <tags>
        <tag>毕业</tag>
        <tag>庵野秀明风格</tag>
      </tags>
  </entry>
  <entry>
    <title>20889;32473;39038;26159;30003;</title>
    <url>/2023/06/18/linbiezengyan2/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码不太对捏" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="15cfbd87b87bb6f58699d81bed622094af91e9e2c834ae3fd7a65bc4e1f4f3ad">ff237e079a879a02e65405b26b486dd1529cd862ab8dfd048115e1c94775c41337517e9f2dec349b0966dc56c310a4a4467f0c6c33fcbb3f50c6a37c8421136192876c9cf989e8fdd54a428b3063ecf106bda2a143d0c249448fff0b774d9b0f7bcd25d7317d0b870c545ac71bbe62dd7bbbe694fe7ee79f79d5499baab02dd72a1367d60ea463707b4130651e3005dabfe877b5d59439fef114b1bb2908b20250df4c3918db950a37fa9dd5cb65c1cd38ab538b3581ca5938aa0a156880008ca5f1c4769b2fb95bf4d84f0defceeb9fca992d1f8977090f5503af32ca3ed0f9b9858943429f4cfb6bf70b7189dd5b57be65868cd30426bfcb7580b41ea026958c07aa197e167218172285dad3a897405e429d7d85475853121a2fd13b4fa12d492e044a911cfd799bbb61d41d29642a6c1445d3d431880e7b6927f7ebd9799974b560c9a5106ee4f82c4b9ad9d3059c00575d4b91febaea3a41f64059626e135a5058db2540eba6d4adfbdd940e1b613d2e6c1f1aed16c42a7cba2e137050860faf7096b9d1c7ee5e4c84f2dcdf4c53895eb087fad9fac7bfb415cbe058a7a944c57a3550c27b631542772c4dced82fbb5a0dc6b728c61f42579ac08e71085644d8ebc1ac80c16a07cbae690a4350f73660a658c13b4ec717b3641b701937068724eb3be387b49e512de2c63754a4c97d1a8abe1df1a8da6835dd697f197f596357e287e2ffe367d3a7e4fb8cc60def0600bf965be382d79c39d0500928ec072fdcaccbb785b77ff1eb4cdf3ee2ac36405ac6c710b3596405948e6483bd3059258ffb446218005f995ba349840f838cf7d243dd4c81a7781fc9c15b5bfdd4b7859421117994240fcdbb99c7e96e6c260f487106f365475397f8708e4df0ba849fddf522f709374d0aa3a3cf69ff46d9e860918ea57557375d2d25611e30df37fcd20dcf8f9131716aaeeafc33d1d714199acfee6719a958c7d73ab784d9eb0071d813347e9ab83aa06bc5250e2f0c88cca4bf23b6921d6976e177d1a323da55529f62f81b50c818a79a69f8b12d13c1808dd6d1254266c8d5792c5eb0e09c03056645cb905625bb83b54db6a8034564770adedd51d926aa5248d67e2e9f1be1a7d034aed054f045d84ba41ba3e2ded3fef6c9c491683978d3be275ae2b1de6d720286e6b660f21815c3ff0b25771d3484d987cf6034e13f4a1064eea2c58ebd86540c9eae96489423962aa03f8498990abafa6a2cd8577e79177b75497a7b7ea478556e19971b5873b3476418ae2bf3cfe594f765d877a821c76471085fc095b0106edcb3a4a6ec49db8d7eafd209766bb3fd93acf7f361b2bc26dfc419f3d619275331b7e179164d867f77bec53feb60e66de7bb11862f74642df20f55443b750388508632853fdb8a2c43bd6c3141</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是一个加密内容，需要密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>临别赠言</category>
      </categories>
      <tags>
        <tag>加密内容</tag>
      </tags>
  </entry>
  <entry>
    <title>20889;32473;25140;26862;31435;</title>
    <url>/2023/06/18/linbiezengyan3/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码不太对捏" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7d9c043b99ff1207d64f46062030ecf6881ba9ed1febda14ff25cf51f8310d2b">ec802132aacd30f27b2d005e2ea7a7a2003c95ca4590b6f5627ed984429de1c1d45329d55a4e5cabdde96c04776f798020f6ac72896463d7f05fc70e33504fe57a63f71173011006dfa9efb45f6978007e289da1942f12fe9eacd199be6eee1b43a11480bd992db1e915154aec2c481971cafe8cff0102ac95ffab2cde88b993715fce3e5e88b55abe0927eff4d9e98a251aea0d64d2bd95398a377f54a16de4476e83109b0265c51054f127dd6ce4dfd78937ca608c8c89808ed16757a6a3c4ac4466fa6a0e5e268580c344fd90e62b9dbf84e1b36cf7eb7b3798e64769e7b4086f1dc27225533c90a01802de84954abfa51076f7899d26f1496731f1a76296f7e865e5acb786648d8b267e77bd1bde49f0b6fcd06d32e836b195170571b085412142a059f2892425ac87afcb606de1873910ae21d429bfeca4a424c8d0faf8092a88315d5f32b8835e6507f72cf59e90ae1c81afad54fa3438beae98af8aebbd240b70e52efa37e6826bec96a55badb42235a437854d7bfd31899343fdb8fc14209a182ae18f0ba037f3c8d4d05d1ea1ba7e04a2caa83dfec579cec677250d621523629566c92109e457f4f5caec35a8207f0ac4657413e160ce582f997a667bc9c3bbe7dfe00f28a2936f6b15d2e3e933ccb52153e42a1f3d0fe2e8b67dfa17a20e876760bab1f1ec1285fe6ca6f719bc74ac9fa251d52c40787dfa4f0aede6ce9b639a3d4e0ca976d2658f52ea0361e9a2ef035c759624adcaab949f83aab74be163cfd51a07e2f7b67b0898efbfdf8a03a2953544daca39a920c95c2546b5f16757d07164a6bdb74e9a384e029fcab4db3eddab772bd02691def0a5022ba30204984f32f5f4ae47c42f0ad240b08e8f2527c654d33beb659020fade76a58c8b5c5a0b2e31487dd41325c1b628197ff3b66e2792697b831acdfe3b2ff34678f27363d99d849cb1596b6c0894bb52eb3ee2d941144e4c362a17d904a531d54f8fc11414cd57b2b0c6ef0829b6515b64dfe82d075727eb3410542f5e93a672216e05b49b387633fa557de5634ca904794c0a665051f62cd5a95e64ecce2b7a45c26fb73f63926e903c4df7f87c10afcfe88180ad4c35004cd0370baae682d5970f4657de5b707914cb54485e244cf7249507b9755edecf4d759ed584fa492df5fd5bcf718fe2c0e1945717bc5743e5ab347b8241ddbfd25830ac97c0dac0a842dad24a0abd5e5535a8c360caa161b93c940e8dd54e2e055f632c4b8c21978aa5e08a1246831d3f86364495c9a059abc121b3b46690f46741fc6c6e22f2efe450b519d6280286efcd10b9ee0999392a5b45d22a8e9252a3c7d30b7a92418ea01efb6503489063de8ef455aa68b73f261c2f9c7557401b66b6a4624cadb1cd38c50e84dd32f6fb7ac601ac8595cc02d979e3181d171b62bf9410c0fa17784b5a7cadf9811cd84a663fb60e7284fd031d2797f2e316195e3da883f39ea9235836408b3c5fef89dbe419248e1724d7ad1aaff9aa7d9b6adc71d3ef5d1d4484d084c797b286e2365c91f1924e9bb931553300a01bf690b5cfa466cf3eadf68143dd9ab22ecddb661d71d4b214617db9d089</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是一个加密内容，需要密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>临别赠言</category>
      </categories>
      <tags>
        <tag>加密内容</tag>
      </tags>
  </entry>
  <entry>
    <title>20889;32473;27611;25391;28009;</title>
    <url>/2023/06/19/linbiezengyan4/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码不太对捏" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9235aec39a00a974192cba804329ffb7b9d0a04972bba6a0eabaef08afdd71ff">5886ab30ca5714d1f9b371b3ffbd606ac2e5302c24784353516fb9e96cad5c5edbf5e98c0e80d26cb9de7b883daea64b55c9e647c6cd2b25142be028c7c45cfa6633e78078773f60330d4f6b0ebe2fe44957a307b410739070f6e5fb465b82c1f638c01b86930646299e23e86c73d3d0c15d44d98c0e2cf9d076f823c5d3715e66e4a17abeb595aa4368fea347f5248494c56a0a36310b38fabb2f2cdb117e95954947664c134e740c3586280a22cc4001b25d12cdd596af60921a08ab46e2eff83c931072fc231bf054f3ef8e03c7efbacdf7299963d2b72b44d0088baf2ac1647e5e41f46457dc52867f6710ddce03235858a655c9560b69319f0c3c1324d82def73c051102bbe2b91ac2ac10786dd3d3901dd9e342d5ec704b1fd68e8dae9e3c432713509b11f423c70c3223185345d8ec4d9c29ef5fd9b47175c44688e523b3d58f573a79e1baf6fe0e85e3354a8aa85092187c4ec3137a68d4ff3fef7e5aef197a6a573933fa63b9756fce52ee9da43a8a0fd92155be3cc7b847e4aeebb77edd25fa02e5d2e05b6e53a45c30fe68735b80f75391afb8bc3ecab81e94587b854e5d51fae1e37533c38628b83652f13577f4526e2a2013bb93d9548dc178945a2bcd398d107d3a588453b917b62b8d42faee86a26be3cd6387c72b7735ff08d2c5f526b6733bf41ae93ccc2db10907e1ebf28bcd709a9fece94848152dcd0501ac6df84bfe0af3bc6cdebbceb87fc2ecf9c458a332253b5831471de8ca9796dfaa0c200b83a503db483359ebcfe35fb42fbed0b51effcc2282fce61bde9cb8fe852122821c95a3e5beda3ab043ef8009489fcd578e6ff0409e5fc6af3a3d5b97b7a8c00316c6785b38f03ec323d0cc21fc63e4c2cc49154b5395414400e4fb6e034e91d64761251bb7e383dd8d64d62aa530e92582e86897c6d86275d6d3562d5254e4d2650b41734c85c211f0a7d1a315ac7df8c5a5dc7869edfb4753bbea98c0cbeb5295a9295ced4c392fe525843f60c3f8bf0ebe0c3793f6557edad5f03cd4f7eeea5ee6a1324e6cd11502a09423a343fa889b04c7b9311bc41840f7d70c118012b145b600eaa0d15bdb6dd40308d576730d286d7f0f1bbdcf215d7220767d3ff5e21e86e9207a8b231a38554400dbc7061a7236901472e299a1e8631bad3e14acc4742bc6c4da920f1e14a182f7a005fe61180de89db66546345d123d2cd32bf1981c853e1f5d68417abfe71df6b55af380d0a8ffe4fd060355a0a73fa6af35c47594a2be080bf7ce3c4131e845a3f2b3256f9603a67ef763345f6c0e41f24fde142fa8173a8d6da02d413f8f12a10aea70720d94fb0c908e36004e9d7eb0870f3eca904c8ce165177055b25f7a9f58f0e066e02263deddd5108b2958243c2982f135ca2ba7abc12c944b94b2eb84a2784eabc4a536910790f430380a96eb56f352de2d44e4809ca5e72e42172ecdcbdb35e05454131c86431d44b1e3ec5279a2ec1c15656a3f72aaf99937674ae5fc56e3c5e71bd6fe305e25e0c8077300a8a070341223abc50305edbbb365000d9299f79940a9c68f610b7ebc43dee35d779e28476ff8248588af7d13af5519cc570f11b0f52bd4f57c6329ccba7451dcdaffc18a9d3216d168ee6efec3965582f51ff65e42300857c42b54fc51fd9abeeccd80ed1a6f9b6fcf9dd3bad9c0be99723e11860d49af328f29c92816fe45b3cafbbd73209d9cc743ed20a9bdbea4abec0db74522a9720267773046d75054bfcb118933c5d22840a34191e4782a144c5c56799e4e0fb783ff221481fd6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是一个加密内容，需要密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>临别赠言</category>
      </categories>
      <tags>
        <tag>加密内容</tag>
      </tags>
  </entry>
  <entry>
    <title>20889;32473;24464;36827;24179;</title>
    <url>/2023/06/18/linbiezengyan1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码不太对捏" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a2a6a4f54239b08c2a35d71290ca5e93f33c5c0a34518647e4a8f7f838e98137">65735b815448ad3a63446ef12ba35639330eb3e3b37cd7a17fb2f2c0c867a0e05e21f825603638338db11dd61e6de0e4343d4c7fd577c1e4a0d20aa95bde770060beb77c3eb135578c065f70508d42d04403ed9e8a6884a333a7128c8074971e28f83015cfaafb293c5b92a7a080c2d4c41bec5aa4fe54fdcb438184384c385e9b803992c2e3a0b9a0ea5c871a81a10b15c4933166a4117e3aefe7d20de7b1404379a05364f1a1b7584360f255a75fd3dce80574732e58021c7256271e60e988a404b3125f0f57b0fc3ec2c7f9a4b6eda498259cc73d7e71721862ce3714351eea19a746bd8f2df8b1ad7617e4c89499748710c211745fbfd505da2c1d6db22f337b530b29c0419ba18df7c9495ba769de429250e12e54efe17a73e0a6f03e80eac0b724bb1d0e6f81262adb64ee45bced1a72ee7056d65281f490710333ccddbd6eb10966299e7d92f624e6bb17bb649c2032cbafb056a230db197484d4687b494be916353461dfa16babdb5ac37ddf7e26c6c758607aef3ab4b06e87860c33e6d0bdd288ee4416111b21a09573317f6b662e9f670431283b06734cb25018d9cc90de62f53a362bf6a37c439e5d761c8363bebc48710d0c3f2ed469fd3d4db8c716900746402f4df31bc30f009824fadea47cb4f0570c16096c4232219f1b89589dad0cb1352dffd376f220516199973b349cd4dea769a9cbc2b068e4378c404ff385d8da3fe16262fc71fa1eaeb2860101228ec5f7023b31a1f986c7d8c1c1f1ad0e6db959cb049ae5021de01bdf123d3ddd5d0e81c60db40c06f58ea1363dcab0305e062335b6bdb40dd30ecbadc6d2d640df2522d2f8abbd2dd0915ddfe6d3a17ee352b42fd65343f4cb72a8323c65a4472822b29e3a0012a1386c5fe8f6a59953473eee900e2c0f6d667d80cf14a8411d948c0a489c03e86282253a2c7fcf26fbe60bb8cfa157294e4b3cd863ec94392dc9f985a8e3f79c9b659de9dd3478e1b00cee8af17ea6feb7f982cbbc77d949d13119e53a21700f211b8546c83bbb554d21d11d3e5951ceb909008a2bdd2006ed748ef9639ac362a7b11bb853feed961961d523a9d900dbbacffa3e1aa7c7c49cb1a6e01041eb3471f3811fcb858fa19c296193b2328e1841af2c87b4ab9287e5d181aadfb3cdda3d6d535d785f0a3e27822f2b06ce448f572bfde45578bc7d2ee65a642cc0cfe5ec05a4ae5024b2823af07f93f75864727019880fb9f7ad78ead1493fc5d5febca0620eb3b0915b0fcef0d02b9a5e3fa9087de7f843df73c81ca0675a7a506c0852265640189159427b2afc805f584c60824633f0e1ed5525782cef841d187dffa47c5ddc7e29373d16ef107a88e6c7f42de9b5abec3e4bc214f98c8bc6fc667271803dd2054e06b2951305fa39385df73c001a6f7a293282d397b95dfaedcd66d467fb4356b892276cd8e5e9044452283913b80773b07eeb96ed22c24690bb90103677b04332</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是一个加密内容，需要密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>临别赠言</category>
      </categories>
      <tags>
        <tag>加密内容</tag>
      </tags>
  </entry>
  <entry>
    <title>20889;32473;21556;23384;21644;</title>
    <url>/2023/06/20/linbiezengyan5/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码不太对捏" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3b2d7e973a3f3cc6b32ad1cc6072da5400de9addc17f6298c6cee7587028dd79">d356183645db3b418b139bdb9e96d7fbbb3bf0f94a41f93e166cdfeec6d3ecc5d20bc0a999508a810aa3855d33c7f1ef9939d685a664e5c9d210d8239e0313af5475df80a0d40206ccf2081f25bccae12daea88ddec88d8cae3141c5d55c35aa62e2f90dc68244da9033b68a9bfdd9cf0ee59de674be46a338e22999734483ac4157c1996373af3d7a703d5f0bf3075c16f0ce475a1df47b140e3957fc68d7ec65d4a52ed4e0ca0e0edb1da5e426f89da82a20186012e64070337c7e8bb76e0e7deb7ee462aa0536971ff2bf12a39492ebd2325e1422a7f69012d415547ac90c28d63b716007754860082411f3be792a9c9d4e506c531b24b6d7ec8034f92d649456d81398043e6aac869fc8e47dcf07c5197145977a46f916dccadf681ae06d0069e3ca00b6129289382d30de3120cdce3034d77d6287f0e3c2b72edde52f3569eb1d33f01adf549e1b6e0d9da9316ef74bb3517f5105751a7743e70265c9739fbe5cbeeabf99cf6b076fb9da5d5ef7925e9e1caf461027c48c32a718466f2d4eb97585fe2bb1a97eea263e784c66e1b78cb6d80297b89a1ebbc451613b56e4d9b83cfb0c39fc8a0e400d97b2959d0b2182408a57b13f6a91466524a58803824a32ae96f3a513e309f0061e446b1018ee49af0edecf2d85de7863ad21e35b3a3b38e36ad8527e43c7a4f3a149e55e7295d967663c23a36c08683fd4acd0d5da51b8642398b920a33895f070f15739666403faf31f068aacb06326eaf3aa1ccf642424e9ac737391378e64b54555a1998d6e3de0883c10cc2ac76f11c64610b0c775644b88e30814f3d25c3db91a70ca348fea2830093967eba080a9f5b1fb4725315c2dcfc9e1a6aa07491b0ea39a0d52d8f6a7b9a6860232346f62d67fa55e40ac2a502cbf640e84910c1ed5e1dbf55d858e5e0db3307c843e6375936731888889e90b8e3149a215d265343bfcb412e57cfb30df31d365dbd83d6ee1834d47d05d462347b7e938fe1f71bdc5417a575289a6c85fc5aa25366b13ac1ecb32c6c4135db60659c4b05e09a3e1a7f6521a188b9f2048670d24a2b09724753f2c0adfdb03d6765efbf2f06743e7823012d3d7ca3d8cdd3d3f70f76a4bbb77182ce44b9c4b7c36173878117faded5bbfb90c1e14acf1c85855293cdb66cb983754f3bed18d5384e306dfd239a5520239ea00a296dbc5cb2aa4c0c2e96484ebc368962f5b221eb6d2521db66d4619447ff0326626e19aaa7e5c86b2f00e0854251f00c5ff63bbc910a7b9324843dc712dc4e59692e0125c3650e1e5bb099ab94105d11588409db1de3630cf12be557ce9a97905645a2032a2e188c3730d3a24077723c9490fb57c62f9998eb3a65e6f316ddfb81420883c037dab3b1e7f28628b8b4c0ac7252abc9f91db89a30c7e6b338490a787555b9cf3b41d5230f81763aa5e38e80ece0fa0a83283199856b86232d9de99f1f500ccf45a61fc756c4b095e79a41904a60fcf28a7a313c85a58ca759ec69680b012fe6958e7e6c0459858c610e92e4a83e6f68bd1cd69b5f4f757502d7b5dc5f26ebdd87358fb7647f4051d6475</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是一个加密内容，需要密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>临别赠言</category>
      </categories>
      <tags>
        <tag>加密内容</tag>
      </tags>
  </entry>
  <entry>
    <title>20889;32473;38472;20896;32701;</title>
    <url>/2023/06/20/linbiezengyan6/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码不太对捏" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="eea363d381570195adf5757bda85ee8cfb4db36916a7769198700ed1b0cb6dfb">252de0c40a526c5d2c6146bc176ba6897ceba1c050033e3f27cd0b69d493cc47b2c632709ef3f04b6cc5992b02a4fa4ce780d3b10b7d93c882991269dda47163bb78b21871082bad93c42e48bd8facd65d22e028cb62adb411a223ccf11343d0182d799e95b52a5eaae59098a163834b290e674535fd814c40a6be0c5a012bc39a722be7179a648688555580b77d4a17b31d0ecec55607c9caea77afbaa1a2440828604eccd9c2b1427a91ddb390b94eee566ef7387098e3543b5cc2f68e902c54bac290fcf4994af5d9f655c436e607e7ec78bbbfc0fb9949174cb05865a34279f8afc359c001606c9aec41e29525269e88595d5c4a34b7b77e500bc3752779a3556667bdd1bf2fbf5fc911913ce1c15a146cfb40f376e0cc31c67b057807c2142ee4347755ef0dad6bd490d6af70b4a45b98a6d8ff6c3556e8fc980eaf0c998aaa1b02075c85abbe074baa92798fce8d977a68c742bfe115309d41d1555957c2cff51c61cd7ca8e7d41ab29d9e41dfc393b9f2817374b4906a65a1731de21396b038cd1acfb524e4a8592777210300bd687d78df2618c062fd97345ca0a3dd3dbfce1b1a5b7a2dc998649ce9ebb4ccf228de0abfd81eeb31dbfbb7989d5d74b623c05e2c04b9d84bf490e6008784c4a9cc34cd44c51c6b731251d97d028952445ebf85f998e8e20dcc9ccade7663bda1fb6d57256759523f22999e468b06e927eadc76bfbd941eaaee96e49898ac8edbaa63f648866d2a01f458c41355afb8d59574a076d8aa214c24982865d2f78c272582ab886ebb3dda3c6cd9c9f3fd34f07cab534deb14d380139c92915a5417ac76e618035dad5e8392ed5df7facdd415964dc969cd53c40c13a9c4d93601ed907fbe8663640a924d5357f1c0dc509ce5cd37d0db89e5903e7bc74a114385ca78fa1a23abf3bd76232533f7c8e3ae4d254c55b81f85897dc28b83ee2e43bf70964a19775c8ef7d900f2cf539c14ad9ab5b76092d58f40c209b0132ae0f475c4231ce149cfe19401f80aedd8e777264703c4ee1cf4ffef57c955a2b9d5bc6095650de16bf7e7fe0fc21ba682d23c6633f63960ec41a0f200458e4e8e648816005f77168cf44dc038b92096a2f270fa345225cf1fe821ca47d53be4c0be36e7d45debc453fee9f367051ae3e8e639ac1b4d0f0750d28f9f62213c09fd44640b7bbc257ca161c21f7295453e55b634dc1b3ef3d43b61a9e9782916665766d020700979ac6e1ec89b47413e64ee0366dd1f9e7493a9e9bb7f985bd7e3a98b3a580a8209b1d6ae49a312e7a5adc520208a28fb3948e88e6c8e9f6d3866e3df7fb5f07849b1b85496eec53aedd506ac31935aee457637fe9e2dd71d78c871c87bc507aee26eb63b4302ef5e92b214593ce32b296ebb6e0c664a1d0b9e512a3e47fa8f4bd100d032eff3640a3fb75fe41767f4bfc91a5d3752385f461a0cfd33817b4f7ead2791e19f697f1c7f9ca4f029e26af5c1dd136316be8772956a482b6909c08d46bad22e36d85a373a9c0d67fd6fbf2ab1ed4f12b2774ea5affbea8b56dbb96892e4dd5afe2820920d35ded22a967f109682f757a476962fd4df914bf6c977bbb45a6a3a4942553cbb40381209c6542c1d23305b23f01bff6552893e26141a884df204a8868a988b20e28ab7598bcd6f1a386c6a66e40e14b86a65a46413871bf2c4fe79c65601bf0a4e3a21118c22</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是一个加密内容，需要密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>临别赠言</category>
      </categories>
      <tags>
        <tag>加密内容</tag>
      </tags>
  </entry>
  <entry>
    <title>my first post</title>
    <url>/2023/04/27/test/</url>
    <content><![CDATA[<h1>你好</h1>
<h2 id="这是我的第一篇个人博客">这是我的第一篇个人博客</h2>
<span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Hello World!&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Le vent se lève, il faut tenter de vivre</p>
</blockquote>
<p>have fun 😃</p>
]]></content>
      <categories>
        <category>经验</category>
      </categories>
      <tags>
        <tag>建站</tag>
      </tags>
  </entry>
  <entry>
    <title>20889;32473;21346;24518;25991;</title>
    <url>/2023/06/20/linbiezengyan7/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码不太对捏" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="15d468a53fbf778c09212139afd6855a3c29ddde0741916eeb3404f87d94a97b">05e3a79ef22e0826625230940c5fddce2891a51276951a65bc11c9a7f09f063d289a092c42b9985855000e616059bc04ac7a6ef4c2aaa41fe4354fed28df44d9af1d99832f950f41d9acc97f8c9227a10d8341f0bde486b14350929f8fd25a83bdf1bc695c081871db83049cd691549c9c2b2223a8474054dd21949be105776ed5526761bec5bbe393b11a46a5d54763d5395285da9ae9b9cf9d24a597661e892da109e643eb50b8d2e937822a0626ec0d5bfd00ff600fd95a497ca361001a9783792d346318ce401b205554cff40b44344581289851b357b7949c0bacc5506cbc209be65f8579f4e14146fcdaeb58289c3b22eb877ccac80f637624bdc00978ab5b1094e939483082c58c691530837f38dd6142fbae734817c9d91dc377ba05f2aa0ea7d39b5c413bae4af6345af885b06d62b199bcea42807b4c6f3f0eb94121a46ab2add3e99db0cb6644992777113010eddd5ed2056a8de63e46d3d050318dc8b9d8f5a1cb89d38dbc1dc691d0ef0be4069d58ee30e2f8f9c0e8d2e9009225c0a77f84c2ed6e85c822dc6c3881dcafc8c3da63d51b2dcf14398fcde21fd1967e9099ed26fe13d20cefdc9530128af515f3602e063d5dd4ec8927f2742a7172b1626177ba38dfdb90c304a0cd4d5f08794d470b38432761c65d6f18a2ab6d0505501fe232f15c84acc9a2c62fe2d876d34f2d162a23159211bc49dc2f055b681f101c386fd12efbc6470bb6035117f4edd5cbbd42f89e2c70a538f19478b59efb6635ca3a243a267f8a077a034001c6417ac237362b95eb6faba05b6fe508a9b25abb32d73305ebdf98720ad936e3f7456d4e839f2a8f6e4911f911849408afd68f2ab4f74da5c3b20cb48dd4f1f10800e96f4757fa6f1aa958da1bf1056685367c32fe890baf70cde3a10f6982e026c39abe6de62ebd7e97d7b7bed2a13b35fdabf4a973226b45a8672bdcad41d1ebfdf98756867cd3e9e37d970fcb0b970a9e5ad6fa628631a9d1452d9083d2a9619ca820937d96c20cf1154a5f5959df16b0d73af49a266c268a38ea827aee19a85e4bdddc340f8a7ee61bf78660ba6e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这是一个加密内容，需要密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>临别赠言</category>
      </categories>
      <tags>
        <tag>加密内容</tag>
      </tags>
  </entry>
</search>
